{"version":3,"sources":["imgs/select.svg","imgs/visual.svg","imgs/add.svg","components/Node.jsx","algorithms/dijkstra.js","algorithms/astar.js","algorithms/greedy.js","algorithms/dfs.js","algorithms/bfs.js","maze/mazeGeneration.js","components/Grid.jsx","maze/random.js","components/Navitem.jsx","components/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","props","preventDragHandler","e","preventDefault","setNodeandAnimation","type","animation","setState","setNode","setAnimation","state","x","node","y","animationType","DEFAULT","canModify","this","onRef","undefined","typename","nodeType","START","END","WALL","WEIGHT_THREE","WEIGHT_FIVE","WEIGHT_EIGHT","animationname","VISITED","PATH","GENERATE","VISITED_NOANIMATION","PATH_NOANIMATION","className","onMouseDown","onMouseEnter","onDragStart","Component","dijkstra","grid","startNode","endNode","visitedNodes","unvisitedNodes","row","push","distance","length","sort","nodeA","nodeB","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","neighbors","unvisitedNeighbors","filter","neighbor","weight","prevNode","totalDis","manhattanDis","unshift","isConnect","prev","getUnvisitedNeighbors","recursiveDivision","mazeNodes","recursiveDivisionHelper","rowStart","rowEnd","colStart","colEnd","width","height","horizontal","DIR","VERTICAL","HORIZONTAL","Math","floor","random","chooseOrientation","possibleRows","possibleCols","col","randomRowIndex","randomColIndex","selectedRow","selectedCol","passageRow","passageCol","dx","dy","i","ny","nx","DEFAULT_START_X","window","innerWidth","DEFAULT_START_Y","innerHeight","DEFAULT_END_X","DEFAULT_END_Y","Grid","handleMouseDown","isVisualized","isMousePressed","clickedNode","toggleNode","nodetype","modfiedNodes","handleMouseEnter","moveStartorEndNode","handleMouseUp","constructInitGrid","algorithm","rows","cols","j","mazeType","resetGrid","calculateMazeNodes","generateWall","animateMaze","setTimeout","randomWall","weights","weightType","randomWeight","generateAllWalls","initNode","randomIdx","temp","curNode","traversalGeneration","pop","randomNeighbor","dfsGeneration","interval","speed","resetGridforVisualize","calculateVisualizedNodes","nodesInPath","animateNodes","abs","astar","greedy","dfs","bfs","currNode","findPath","new_type","prevX","prevY","adaptAlgorithm","onMouseUp","onMouseLeave","map","rowIdx","key","id","nodeIdx","ref","Navitem","name","Button","onClick","Dropdown","Toggle","curItem","Menu","itemList","item","Item","onSelect","onChangeItem","algorithms","maze","speeds","PathfindingVisualizer","handleChangeAlgorithm","curAlgorithm","handleChangeMaze","curMaze","handleChangeSpeed","speedname","curSpeed","handleChangeNodeType","curNodeType","handleReset","handleGenerateMaze","generateMaze","handleVisualize","visualize","ceil","Navbar","variant","Brand","href","Nav","src","select","alt","add","visual","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.844bed60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/select.f4d9287c.svg\";","module.exports = __webpack_public_path__ + \"static/media/visual.af17a8e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.93421e0d.svg\";","import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x: props.node.x,\n      y: props.node.y,\n      type: props.node.type,\n      animation: animationType.DEFAULT,\n      canModify: true\n    };\n  }\n\n  componentDidMount() {\n    this.props.onRef(this);\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  preventDragHandler = e => {\n    e.preventDefault();\n  };\n\n  setNodeandAnimation = (type, animation) => {\n    this.setState({ type, animation });\n  };\n\n  setNode = type => {\n    this.setState({ type });\n  };\n\n  setAnimation = animation => {\n    this.setState({ animation });\n  };\n\n  render() {\n    let { type } = this.state;\n    let typename =\n      type === nodeType.START\n        ? \"node-start\"\n        : type === nodeType.END\n        ? \"node-end\"\n        : type === nodeType.WALL\n        ? \"node-wall\"\n        : type === nodeType.WEIGHT_THREE\n        ? \"node-three\"\n        : type === nodeType.WEIGHT_FIVE\n        ? \"node-five\"\n        : type === nodeType.WEIGHT_EIGHT\n        ? \"node-eight\"\n        : \"\";\n\n    let { animation } = this.state;\n    let animationname =\n      animation === animationType.VISITED\n        ? \"visited\"\n        : animation === animationType.PATH\n        ? \"path\"\n        : animation === animationType.GENERATE\n        ? \"generate\"\n        : animation === animationType.VISITED_NOANIMATION\n        ? \"visited-noanimation\"\n        : animation === animationType.PATH_NOANIMATION\n        ? \"path-noanimation\"\n        : \"\";\n\n    return (\n      <div className={`cell`}>\n        <div\n          className={`node ${typename} ${animationname}`}\n          onMouseDown={() => this.props.onMouseDown(this.state)}\n          onMouseEnter={() => this.props.onMouseEnter(this.state)}\n          onDragStart={this.preventDragHandler}\n        ></div>\n      </div>\n    );\n  }\n}\n\nexport default Node;\nexport const nodeType = {\n  DEFAULT: 1,\n  START: 2,\n  END: 3,\n  WALL: 4,\n  WEIGHT_THREE: 5,\n  WEIGHT_FIVE: 6,\n  WEIGHT_EIGHT: 7\n};\n\nexport const animationType = {\n  DEFAULT: 1,\n  VISITED: 2,\n  PATH: 3,\n  GENERATE: 4,\n  VISITED_NOANIMATION: 5,\n  PATH_NOANIMATION: 6\n};\n","import { nodeType } from \"../components/Node\";\n\n// performs Dijkstra's algorithm\nexport function dijkstra(grid, startNode, endNode) {\n  let visitedNodes = [];\n  let unvisitedNodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      unvisitedNodes.push(node);\n    }\n  }\n  startNode.distance = 0;\n  while (unvisitedNodes.length !== 0) {\n    // sort the nodes by distance\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n    const closestNode = unvisitedNodes.shift();\n\n    // trapped by wall\n    if (closestNode.distance === Infinity) return visitedNodes;\n\n    closestNode.isVisited = true;\n    visitedNodes.push(closestNode);\n\n    // reach goal\n    if (closestNode === endNode) return visitedNodes;\n\n    // update distance for neighbors\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n  return visitedNodes;\n}\n\n// backtracks from the endNode to find the shortest path\nexport function findPath(endNode) {\n  let nodesInPath = [];\n  let currNode = endNode;\n\n  while (currNode !== null) {\n    nodesInPath.unshift(currNode);\n    currNode = currNode.prevNode;\n  }\n\n  // check if end node is reached\n  nodesInPath = nodesInPath.length === 1 ? [] : nodesInPath;\n  return nodesInPath;\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  let neighbors = [];\n  const { x, y } = node;\n  if (y > 0) neighbors.push(grid[y - 1][x]);\n  if (y < grid.length - 1) neighbors.push(grid[y + 1][x]);\n  if (x > 0) neighbors.push(grid[y][x - 1]);\n  if (x < grid[0].length - 1) neighbors.push(grid[y][x + 1]);\n  const unvisitedNeighbors = neighbors.filter(\n    neighbor => !neighbor.isVisited && neighbor.type !== nodeType.WALL\n  );\n\n  for (const neighbor of unvisitedNeighbors) {\n    if (node.distance + neighbor.weight < neighbor.distance) {\n      neighbor.distance = node.distance + neighbor.weight;\n      neighbor.prevNode = node;\n    }\n  }\n}\n","import { nodeType } from \"../components/Node\";\n\n// performs astar algorithm\nexport function astar(grid, startNode, endNode) {\n  let visitedNodes = [];\n  let unvisitedNodes = [];\n\n  // calculate heuristic distance from each node to end node\n  for (const row of grid) {\n    for (const node of row) {\n      node.manhattanDis = ManhattanDistance(node, endNode);\n      unvisitedNodes.push(node);\n    }\n  }\n\n  startNode.distance = 0;\n  startNode.totalDis = startNode.manhattanDis;\n\n  while (unvisitedNodes.length !== 0) {\n    // sort the nodes by total distance\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.totalDis - nodeB.totalDis);\n    const closestNode = unvisitedNodes.shift();\n\n    // trapped by wall\n    if (closestNode.distance === Infinity) return visitedNodes;\n\n    closestNode.isVisited = true;\n    visitedNodes.push(closestNode);\n\n    // reach goal\n    if (closestNode === endNode) return visitedNodes;\n\n    // update distance for neighbors\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n  return visitedNodes;\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  let neighbors = [];\n  const { x, y } = node;\n  if (y > 0) neighbors.push(grid[y - 1][x]);\n  if (y < grid.length - 1) neighbors.push(grid[y + 1][x]);\n  if (x > 0) neighbors.push(grid[y][x - 1]);\n  if (x < grid[0].length - 1) neighbors.push(grid[y][x + 1]);\n  const unvisitedNeighbors = neighbors.filter(\n    neighbor => !neighbor.isVisited && neighbor.type !== nodeType.WALL\n  );\n\n  for (const neighbor of unvisitedNeighbors) {\n    if (node.distance + neighbor.weight < neighbor.distance) {\n      neighbor.distance = node.distance + neighbor.weight;\n      neighbor.totalDis = neighbor.distance + neighbor.manhattanDis;\n      neighbor.prevNode = node;\n    }\n  }\n}\n\nfunction ManhattanDistance(nodeA, nodeB) {\n  return Math.abs(nodeA.x - nodeB.x) + Math.abs(nodeA.y - nodeB.y);\n}\n","import { nodeType } from \"../components/Node\";\n\n// performs greedy best-first search algorithm\nexport function greedy(grid, startNode, endNode) {\n  let visitedNodes = [];\n  let unvisitedNodes = [];\n\n  // calculate heuristic distance from each node to end node\n  for (const row of grid) {\n    for (const node of row) {\n      node.distance = node.weight + ManhattanDistance(node, endNode);\n    }\n  }\n\n  unvisitedNodes.push(startNode);\n  startNode.isVisited = true;\n\n  while (unvisitedNodes.length !== 0) {\n    // sort the nodes by total distance\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n    const closestNode = unvisitedNodes.shift();\n\n    // trapped by wall\n    if (closestNode.distance === Infinity) return visitedNodes;\n\n    visitedNodes.push(closestNode);\n\n    // reach goal\n    if (closestNode === endNode) return visitedNodes;\n\n    // update distance for neighbors\n    updateUnvisitedNeighbors(closestNode, grid, unvisitedNodes);\n  }\n\n  return visitedNodes;\n}\n\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\n  const { x, y } = node;\n  if (\n    x > 0 &&\n    !grid[y][x - 1].isVisited &&\n    grid[y][x - 1].type !== nodeType.WALL\n  ) {\n    grid[y][x - 1].isVisited = true;\n    grid[y][x - 1].prevNode = node;\n    unvisitedNodes.push(grid[y][x - 1]);\n  }\n  if (\n    y < grid.length - 1 &&\n    !grid[y + 1][x].isVisited &&\n    grid[y + 1][x].type !== nodeType.WALL\n  ) {\n    grid[y + 1][x].isVisited = true;\n    grid[y + 1][x].prevNode = node;\n    unvisitedNodes.push(grid[y + 1][x]);\n  }\n  if (\n    x < grid[0].length - 1 &&\n    !grid[y][x + 1].isVisited &&\n    grid[y][x + 1].type !== nodeType.WALL\n  ) {\n    grid[y][x + 1].isVisited = true;\n    grid[y][x + 1].prevNode = node;\n    unvisitedNodes.push(grid[y][x + 1]);\n  }\n  if (\n    y > 0 &&\n    !grid[y - 1][x].isVisited &&\n    grid[y - 1][x].type !== nodeType.WALL\n  ) {\n    grid[y - 1][x].isVisited = true;\n    grid[y - 1][x].prevNode = node;\n    unvisitedNodes.push(grid[y - 1][x]);\n  }\n}\n\nfunction ManhattanDistance(nodeA, nodeB) {\n  return Math.abs(nodeA.x - nodeB.x) + Math.abs(nodeA.y - nodeB.y);\n}\n","import { nodeType } from \"../components/Node\";\n\n// performs depth first search algorithm\nexport function dfs(grid, startNode, endNode) {\n  const visitedNodes = [];\n  let unvisitedNodes = [];\n  unvisitedNodes.push(startNode);\n  while (unvisitedNodes.length !== 0) {\n    // get next cur node\n    const curNode = unvisitedNodes.shift();\n\n    // stack may contain two same nodes\n    if (!curNode.isVisited) {\n      curNode.isVisited = true;\n      visitedNodes.push(curNode);\n      if (curNode === endNode) return visitedNodes;\n\n      // add neighbors to unvisitedNodes\n      updateUnvisitedNeighbors(curNode, grid, unvisitedNodes);\n    }\n  }\n\n  return visitedNodes;\n}\n\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\n  const { x, y } = node;\n  if (\n    x > 0 &&\n    !grid[y][x - 1].isVisited &&\n    grid[y][x - 1].type !== nodeType.WALL\n  ) {\n    grid[y][x - 1].prevNode = node;\n    unvisitedNodes.unshift(grid[y][x - 1]);\n  }\n  if (\n    y < grid.length - 1 &&\n    !grid[y + 1][x].isVisited &&\n    grid[y + 1][x].type !== nodeType.WALL\n  ) {\n    grid[y + 1][x].prevNode = node;\n    unvisitedNodes.unshift(grid[y + 1][x]);\n  }\n  if (\n    x < grid[0].length - 1 &&\n    !grid[y][x + 1].isVisited &&\n    grid[y][x + 1].type !== nodeType.WALL\n  ) {\n    grid[y][x + 1].prevNode = node;\n    unvisitedNodes.unshift(grid[y][x + 1]);\n  }\n  if (\n    y > 0 &&\n    !grid[y - 1][x].isVisited &&\n    grid[y - 1][x].type !== nodeType.WALL\n  ) {\n    grid[y - 1][x].prevNode = node;\n    unvisitedNodes.unshift(grid[y - 1][x]);\n  }\n}\n","import { nodeType } from \"../components/Node\";\n\n// performs breadth first search algorithm\nexport function bfs(grid, startNode, endNode) {\n  const visitedNodes = [];\n  let unvisitedNodes = [];\n  unvisitedNodes.push(startNode);\n  startNode.isVisited = true;\n  while (unvisitedNodes.length !== 0) {\n    // get next cur node\n    const curNode = unvisitedNodes.shift();\n    visitedNodes.push(curNode);\n\n    // reach goal\n    if (curNode === endNode) return visitedNodes;\n\n    // add neighbors to unvisitedNodes\n    updateUnvisitedNeighbors(curNode, grid, unvisitedNodes);\n  }\n\n  return visitedNodes;\n}\n\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\n  const { x, y } = node;\n  if (\n    x > 0 &&\n    !grid[y][x - 1].isVisited &&\n    grid[y][x - 1].type !== nodeType.WALL\n  ) {\n    grid[y][x - 1].isVisited = true;\n    grid[y][x - 1].prevNode = node;\n    unvisitedNodes.push(grid[y][x - 1]);\n  }\n  if (\n    y < grid.length - 1 &&\n    !grid[y + 1][x].isVisited &&\n    grid[y + 1][x].type !== nodeType.WALL\n  ) {\n    grid[y + 1][x].isVisited = true;\n    grid[y + 1][x].prevNode = node;\n    unvisitedNodes.push(grid[y + 1][x]);\n  }\n  if (\n    x < grid[0].length - 1 &&\n    !grid[y][x + 1].isVisited &&\n    grid[y][x + 1].type !== nodeType.WALL\n  ) {\n    grid[y][x + 1].isVisited = true;\n    grid[y][x + 1].prevNode = node;\n    unvisitedNodes.push(grid[y][x + 1]);\n  }\n  if (\n    y > 0 &&\n    !grid[y - 1][x].isVisited &&\n    grid[y - 1][x].type !== nodeType.WALL\n  ) {\n    grid[y - 1][x].isVisited = true;\n    grid[y - 1][x].prevNode = node;\n    unvisitedNodes.push(grid[y - 1][x]);\n  }\n}\n","import { nodeType } from \"../components/Node\";\n\nfunction isConnect(node, grid, prev) {\n  const { x, y } = node;\n  if (y > 0 && prev !== grid[y - 1][x] && grid[y - 1][x].isVisited) return true;\n  if (\n    y < grid.length - 1 &&\n    prev !== grid[y + 1][x] &&\n    grid[y + 1][x].isVisited\n  )\n    return true;\n  if (x > 0 && prev !== grid[y][x - 1] && grid[y][x - 1].isVisited) return true;\n  if (\n    x < grid[0].length - 1 &&\n    prev !== grid[y][x + 1] &&\n    grid[y][x + 1].isVisited\n  )\n    return true;\n  return false;\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  let neighbors = [];\n  const { x, y } = node;\n  if (y > 0) neighbors.push(grid[y - 1][x]);\n  if (y < grid.length - 1) neighbors.push(grid[y + 1][x]);\n  if (x > 0) neighbors.push(grid[y][x - 1]);\n  if (x < grid[0].length - 1) neighbors.push(grid[y][x + 1]);\n  const unvisitedNeighbors = neighbors.filter(\n    neighbor => !neighbor.isVisited && !isConnect(neighbor, grid, node)\n  );\n  return unvisitedNeighbors;\n}\n\n// depth-first search approach using recursive backtracker and stack\nexport function dfsGeneration(grid) {\n  // init node\n  const initNode =\n    grid[0][0].type !== nodeType.START && grid[0][0].type !== nodeType.END\n      ? grid[0][0]\n      : grid[0][1].type !== nodeType.START && grid[0][1].type !== nodeType.END\n      ? grid[0][1]\n      : grid[0][2];\n  initNode.isVisited = true;\n  initNode.type = nodeType.DEFAULT;\n\n  let mazeNodes = [];\n  let visitedNodes = [];\n  visitedNodes.push(initNode);\n  mazeNodes.push(initNode);\n\n  while (visitedNodes.length !== 0) {\n    let curNode = visitedNodes.pop();\n    const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\n\n    // If the current cell has any neighbours which have not been visited\n    if (unvisitedNeighbors.length !== 0) {\n      visitedNodes.push(curNode);\n      // pick a random neighbor\n      let randomNeighbor =\n        unvisitedNeighbors[\n          Math.floor(Math.random() * unvisitedNeighbors.length)\n        ];\n      randomNeighbor.isVisited = true; // set visited\n      visitedNodes.push(randomNeighbor); // push it to the stack\n      if (randomNeighbor.type === nodeType.WALL) {\n        randomNeighbor.type = nodeType.DEFAULT; // remove wall\n        mazeNodes.push(randomNeighbor); // add to animation nodes\n      }\n    }\n  }\n\n  return mazeNodes;\n}\n\n// random traversal\nexport function traversalGeneration(grid) {\n  // init node\n  const initNode =\n    grid[0][0].type !== nodeType.START && grid[0][0].type !== nodeType.END\n      ? grid[0][0]\n      : grid[0][1].type !== nodeType.START && grid[0][1].type !== nodeType.END\n      ? grid[0][1]\n      : grid[0][2];\n  initNode.type = nodeType.DEFAULT;\n\n  let mazeNodes = [];\n  let visitedNodes = [];\n  visitedNodes.push(initNode);\n  mazeNodes.push(initNode);\n\n  while (visitedNodes.length !== 0) {\n    // randomly expand\n    let randomIdx = Math.floor(Math.random() * visitedNodes.length);\n    // swap for shuffling\n    let temp = visitedNodes[randomIdx];\n    visitedNodes[randomIdx] = visitedNodes[0];\n    visitedNodes[0] = temp;\n    let curNode = visitedNodes.shift();\n\n    // make sure it doesn't connect previous maze\n    if (isConnect(curNode, grid, curNode.prevNode)) {\n      continue;\n    }\n    curNode.isVisited = true; // set visited flag\n    if (curNode.type === nodeType.WALL) {\n      curNode.type = nodeType.DEFAULT; // remove wall\n      mazeNodes.push(curNode); // add to animation nodes\n    }\n    const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\n\n    // If the current cell has any neighbours which have not been visited\n    for (let neighbor of unvisitedNeighbors) {\n      neighbor.prevNode = curNode;\n      visitedNodes.push(neighbor); // push it to the stack\n    }\n  }\n\n  return mazeNodes;\n}\n\n// recursive division\nexport function recursiveDivision(grid) {\n  let row = grid.length;\n  let col = grid[0].length;\n  let mazeNodes = [];\n  recursiveDivisionHelper(grid, 1, row - 2, 1, col - 2, mazeNodes); // extra room for passage\n  return mazeNodes;\n}\n\nfunction chooseOrientation(width, height) {\n  if (width > height) {\n    return DIR.VERTICAL;\n  } else if (width < height) {\n    return DIR.HORIZONTAL;\n  } else {\n    return Math.floor(Math.random() * 2) === 0 ? DIR.HORIZONTAL : DIR.VERTICAL;\n  }\n}\n\nfunction recursiveDivisionHelper(\n  grid,\n  rowStart,\n  rowEnd,\n  colStart,\n  colEnd,\n  mazeNodes\n) {\n  // finish division\n  if (rowEnd - rowStart < 0 || colEnd - colStart < 0) {\n    return;\n  }\n  let width = colEnd - colStart + 1;\n  let height = rowEnd - rowStart + 1;\n  let horizontal = chooseOrientation(width, height) === DIR.HORIZONTAL;\n\n  // find possible rows and cols\n  let possibleRows = [];\n  let possibleCols = [];\n\n  for (\n    let row = horizontal ? rowStart : rowStart - 1;\n    row <= (horizontal ? rowEnd : rowEnd + 1);\n    row += 2\n  ) {\n    possibleRows.push(row);\n  }\n\n  for (\n    let col = horizontal ? colStart - 1 : colStart;\n    col <= (horizontal ? colEnd + 1 : colEnd);\n    col += 2\n  ) {\n    possibleCols.push(col);\n  }\n\n  let randomRowIndex = Math.floor(Math.random() * possibleRows.length);\n  let randomColIndex = Math.floor(Math.random() * possibleCols.length);\n\n  // where to draw\n  let selectedRow = horizontal ? possibleRows[randomRowIndex] : rowStart;\n  let selectedCol = horizontal ? colStart : possibleCols[randomColIndex];\n\n  // where is the passage : random walls and passage (walls on even, passage on odd)\n  let passageRow = horizontal ? selectedRow : possibleRows[randomRowIndex];\n  let passageCol = horizontal ? possibleCols[randomColIndex] : selectedCol;\n\n  // draw walls and passage\n  let x = horizontal ? colStart - 1 : selectedCol;\n  let y = horizontal ? selectedRow : rowStart - 1;\n  let dx = horizontal ? 1 : 0;\n  let dy = horizontal ? 0 : 1;\n  let length = horizontal ? width + 1 : height + 1;\n\n  for (let i = 0; i <= length; i++) {\n    if (\n      (x !== passageCol || y !== passageRow) &&\n      grid[y][x].type === nodeType.DEFAULT\n    ) {\n      grid[y][x].type = nodeType.WALL;\n      mazeNodes.push(grid[y][x]);\n    }\n\n    x += dx;\n    y += dy;\n  }\n\n  // recursively draw on subfields\n  let ny = selectedRow + (horizontal ? 2 : 0);\n  let nx = selectedCol + (horizontal ? 0 : 2);\n  recursiveDivisionHelper(grid, ny, rowEnd, nx, colEnd, mazeNodes);\n\n  ny = horizontal ? selectedRow - 2 : rowEnd;\n  nx = horizontal ? colEnd : selectedCol - 2;\n  recursiveDivisionHelper(grid, rowStart, ny, colStart, nx, mazeNodes);\n}\n\nconst DIR = {\n  HORIZONTAL: 0,\n  VERTICAL: 1\n};\n","import React, { Component } from \"react\";\nimport Node, { nodeType, animationType } from \"./Node\";\nimport { dijkstra, findPath } from \"../algorithms/dijkstra\";\nimport { astar } from \"../algorithms/astar\";\nimport { greedy } from \"../algorithms/greedy\";\nimport { dfs } from \"../algorithms/dfs\";\nimport { bfs } from \"../algorithms/bfs\";\nimport { randomWall, randomWeight } from \"../maze/random\";\nimport {\n  dfsGeneration,\n  traversalGeneration,\n  recursiveDivision\n} from \"../maze/mazeGeneration\";\n\nimport \"./Node.css\";\n\nconst DEFAULT_START_X = Math.floor((window.innerWidth / 25 + 1) / 4);\nconst DEFAULT_START_Y = Math.floor((window.innerHeight / 25 - 9) / 2);\nconst DEFAULT_END_X = Math.floor(((window.innerWidth / 25 + 1) * 3) / 4);\nconst DEFAULT_END_Y = Math.floor((window.innerHeight / 25 - 9) / 2);\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.grid = this.constructInitGrid();\n    this.startNode = this.grid[DEFAULT_START_Y][DEFAULT_START_X];\n    this.endNode = this.grid[DEFAULT_END_Y][DEFAULT_END_X];\n    this.isMousePressed = false;\n    this.isVisualized = false;\n    this.algorithm = null;\n    this.clickedNode = null;\n    this.modfiedNodes = [];\n  }\n\n  componentDidMount() {\n    this.props.onRef(this);\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  resetGrid() {\n    if (this.isVisualized) return;\n    let rows = this.grid.length;\n    let cols = this.grid[0].length;\n    this.algorithm = null;\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (\n          this.grid[i][j].type !== nodeType.START &&\n          this.grid[i][j].type !== nodeType.END\n        ) {\n          this.grid[i][j].type = nodeType.DEFAULT;\n          this.grid[i][j].weight = 1;\n          this[`node-${i}-${j}`].setNode(nodeType.DEFAULT);\n        }\n        this.grid[i][j].prevNode = null;\n        this.grid[i][j].distance = Infinity;\n        this.grid[i][j].totalDis = Infinity;\n        this.grid[i][j].manhattanDis = Infinity;\n        this.grid[i][j].isVisited = false;\n        this[`node-${i}-${j}`].setAnimation(animationType.DEFAULT);\n      }\n    }\n  }\n\n  generateMaze(mazeType) {\n    if (this.isVisualized) return;\n    this.resetGrid(); // reset the grid for new maze\n    this.isVisualized = true; // set flag\n\n    // generate maze nodes in grid\n    const mazeNodes = this.calculateMazeNodes(mazeType);\n    const generateWall =\n      mazeType === \"Random Traversal\" || mazeType === \"Depth-First Search\"\n        ? true\n        : false;\n    this.animateMaze(mazeNodes, generateWall);\n  }\n\n  generateAllWalls() {\n    let i = 0;\n    for (const row of this.grid) {\n      for (const node of row) {\n        // generate a grid with all walls\n        if (node.type === nodeType.DEFAULT) {\n          node.type = nodeType.WALL; // set to wall\n          setTimeout(() => {\n            this[`node-${node.y}-${node.x}`].setNodeandAnimation(\n              nodeType.WALL,\n              animationType.GENERATE\n            );\n          }, 4 * i);\n          i++;\n        }\n      }\n    }\n  }\n\n  calculateMazeNodes(mazeType) {\n    let mazeNodes;\n    switch (mazeType) {\n      case \"Random Wall\":\n        mazeNodes = randomWall(this.grid);\n        break;\n      case \"Random Weight\":\n        mazeNodes = randomWeight(this.grid);\n        break;\n      case \"Random Traversal\":\n        this.generateAllWalls();\n        mazeNodes = traversalGeneration(this.grid);\n        break;\n      case \"Depth-First Search\":\n        this.generateAllWalls();\n        mazeNodes = dfsGeneration(this.grid);\n        break;\n      case \"Recursive Division\":\n        mazeNodes = recursiveDivision(this.grid);\n        break;\n      default:\n        mazeNodes = [];\n        break;\n    }\n    return mazeNodes;\n  }\n\n  animateMaze(mazeNodes, generateWall) {\n    let rows = this.grid.length;\n    let cols = this.grid[0].length;\n    let interval = generateWall ? rows * cols : 0;\n    // animate maze nodes\n    for (let i = 0; i < mazeNodes.length; i++) {\n      setTimeout(() => {\n        const node = mazeNodes[i];\n        this[`node-${node.y}-${node.x}`].setNodeandAnimation(\n          node.type,\n          node.type === nodeType.DEFAULT\n            ? animationType.DEFAULT\n            : animationType.GENERATE\n        );\n      }, 4 * (i + interval + 1));\n    }\n\n    // finish maze generation\n    setTimeout(() => {\n      this.isVisualized = false;\n    }, 10 + (interval + mazeNodes.length + 1) * 4);\n  }\n\n  resetGridforVisualize() {\n    let rows = this.grid.length;\n    let cols = this.grid[0].length;\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        this.grid[i][j].prevNode = null;\n        this.grid[i][j].distance = Infinity;\n        this.grid[i][j].totalDis = Infinity;\n        this.grid[i][j].manhattanDis = Infinity;\n        this.grid[i][j].isVisited = false;\n        this[`node-${i}-${j}`].setAnimation(animationType.DEFAULT);\n      }\n    }\n  }\n\n  visualize(algorithm, speed) {\n    if (this.isVisualized) return;\n    this.isVisualized = true; // set flag\n\n    // reset the internal of the grid\n    // and clear previous visualization\n    this.resetGridforVisualize();\n    this.algorithm = algorithm;\n    const [visitedNodes, nodesInPath] = this.calculateVisualizedNodes(\n      algorithm\n    );\n    this.animateNodes(visitedNodes, nodesInPath, speed);\n  }\n\n  adaptAlgorithm() {\n    this.resetGridforVisualize();\n    const [visitedNodes, nodesInPath] = this.calculateVisualizedNodes(\n      this.props.algorithm\n    );\n\n    for (let i = 0; i < visitedNodes.length + nodesInPath.length; i++) {\n      let node;\n      if (i < visitedNodes.length) {\n        node = visitedNodes[i];\n        this[`node-${node.y}-${node.x}`].setAnimation(\n          animationType.VISITED_NOANIMATION\n        );\n      } else {\n        node = nodesInPath[i - visitedNodes.length];\n        this[`node-${node.y}-${node.x}`].setAnimation(\n          animationType.PATH_NOANIMATION\n        );\n      }\n    }\n  }\n\n  calculateVisualizedNodes(algorithm) {\n    let visitedNodes, nodesInPath;\n    switch (algorithm) {\n      case \"Dijkstra\":\n        visitedNodes = dijkstra(this.grid, this.startNode, this.endNode);\n        break;\n      case \"A* Search\":\n        visitedNodes = astar(this.grid, this.startNode, this.endNode);\n        break;\n      case \"Greedy Best-First Search\":\n        visitedNodes = greedy(this.grid, this.startNode, this.endNode);\n        break;\n      case \"Depth-First Search\":\n        visitedNodes = dfs(this.grid, this.startNode, this.endNode);\n        break;\n      case \"Breadth-First Search\":\n        visitedNodes = bfs(this.grid, this.startNode, this.endNode);\n        break;\n      default:\n        visitedNodes = dijkstra(this.grid, this.startNode, this.endNode);\n        break;\n    }\n    nodesInPath = findPath(this.endNode);\n    return [visitedNodes, nodesInPath];\n  }\n\n  animateNodes(visitedNodes, nodesInPath, speed) {\n    for (let i = 0; i <= visitedNodes.length; i++) {\n      if (i === visitedNodes.length) {\n        setTimeout(() => {\n          for (let j = 0; j < nodesInPath.length; j++) {\n            setTimeout(() => {\n              const node = nodesInPath[j];\n              if (node.type === nodeType.START || node.type === nodeType.END) {\n                this[`node-${node.y}-${node.x}`].setAnimation(\n                  animationType.PATH_NOANIMATION\n                );\n              } else {\n                this[`node-${node.y}-${node.x}`].setAnimation(\n                  animationType.PATH\n                );\n              }\n            }, 10 + 2 * speed * j);\n          }\n        }, 10 + speed * i);\n      } else {\n        setTimeout(() => {\n          const node = visitedNodes[i];\n          this[`node-${node.y}-${node.x}`].setAnimation(animationType.VISITED);\n        }, 10 + speed * i);\n      }\n    }\n\n    // finish visualization\n    setTimeout(() => {\n      this.isVisualized = false;\n    }, 100 + speed * visitedNodes.length + 2 * speed * nodesInPath.length);\n  }\n\n  toggleNode(node, type) {\n    let new_type = node.type;\n    if (node.type === nodeType.DEFAULT) {\n      new_type = type;\n      let weight =\n        new_type === nodeType.WEIGHT_THREE\n          ? 3\n          : new_type === nodeType.WEIGHT_FIVE\n          ? 5\n          : new_type === nodeType.WEIGHT_EIGHT\n          ? 8\n          : Infinity;\n      this.grid[node.y][node.x].weight = weight; // set weight\n      this[`node-${node.y}-${node.x}`].setNodeandAnimation(\n        new_type,\n        animationType.GENERATE\n      );\n    } else if (\n      node.type === nodeType.WALL ||\n      node.type === nodeType.WEIGHT_THREE ||\n      node.type === nodeType.WEIGHT_FIVE ||\n      node.type === nodeType.WEIGHT_EIGHT\n    ) {\n      new_type = nodeType.DEFAULT;\n      this.grid[node.y][node.x].weight = 1; // reset weight to 1\n      this[`node-${node.y}-${node.x}`].setNodeandAnimation(\n        new_type,\n        animationType.DEFAULT\n      );\n    }\n\n    this.grid[node.y][node.x].type = new_type;\n  }\n\n  moveStartorEndNode(node) {\n    if (node.type === nodeType.DEFAULT) {\n      const prevX = this.clickedNode.x;\n      const prevY = this.clickedNode.y;\n      const { x, y } = node;\n      this[`node-${prevY}-${prevX}`].setNode(nodeType.DEFAULT);\n      this.grid[prevY][prevX].type = nodeType.DEFAULT;\n      this[`node-${y}-${x}`].setNode(this.clickedNode.type);\n      this.grid[y][x].type = this.clickedNode.type;\n      if (this.grid[y][x].type === nodeType.START) {\n        this.startNode = this.grid[y][x];\n      } else {\n        this.endNode = this.grid[y][x];\n      }\n      this.clickedNode.x = x;\n      this.clickedNode.y = y;\n\n      if (this.algorithm) {\n        this.adaptAlgorithm();\n      }\n    }\n  }\n\n  handleMouseDown = node => {\n    if (this.isVisualized) return;\n    this.isMousePressed = true;\n\n    // copy the node state\n    this.clickedNode = {\n      ...node\n    };\n\n    this.toggleNode(node, this.props.nodetype);\n\n    // can only modify the node once (for non-start, non-end nodes)\n    if (\n      this.clickedNode.type !== nodeType.START &&\n      this.clickedNode.type !== nodeType.END\n    ) {\n      node.canModify = false;\n      this.modfiedNodes.push(node);\n    }\n  };\n\n  handleMouseEnter = node => {\n    // can only modify the node once\n    if (!this.isMousePressed || !node.canModify) return;\n    if (\n      this.clickedNode.type !== nodeType.START &&\n      this.clickedNode.type !== nodeType.END\n    ) {\n      this.toggleNode(node, this.props.nodetype);\n\n      // set the flag so that the node cannot be modified\n      node.canModify = false;\n      this.modfiedNodes.push(node);\n    } else {\n      this.moveStartorEndNode(node);\n    }\n  };\n\n  handleMouseUp = () => {\n    this.isMousePressed = false;\n    this.clickedNode = null;\n\n    // reset all the modified nodes to can-modifiy\n    for (let i = 0; i < this.modfiedNodes.length; i++) {\n      const node = this.modfiedNodes[i];\n      this[`node-${node.y}-${node.x}`].setState({ canModify: true });\n    }\n    this.modfiedNodes = [];\n  };\n\n  constructInitGrid() {\n    let rows = this.props.rows;\n    let cols = this.props.cols;\n    let grid = [];\n\n    for (let i = 0; i < rows; i++) {\n      let row = [];\n      for (let j = 0; j < cols; j++) {\n        const type =\n          j === DEFAULT_START_X && i === DEFAULT_START_Y\n            ? nodeType.START\n            : j === DEFAULT_END_X && i === DEFAULT_END_Y\n            ? nodeType.END\n            : nodeType.DEFAULT;\n        let node = {\n          x: j,\n          y: i,\n          type: type,\n          isVisited: false,\n          distance: Infinity,\n          totalDis: Infinity,\n          manhattanDis: Infinity,\n          weight: 1,\n          prevNode: null\n        };\n        row.push(node);\n      }\n      grid.push(row);\n    }\n    return grid;\n  }\n\n  render() {\n    return (\n      <div\n        className=\"grid\"\n        onMouseUp={() => this.handleMouseUp()}\n        onMouseLeave={() => this.handleMouseUp()}\n      >\n        {this.grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx} id=\"row\">\n              {row.map((node, nodeIdx) => {\n                return (\n                  <Node\n                    key={nodeIdx}\n                    id={`node-${rowIdx}-${nodeIdx}`}\n                    node={node}\n                    onMouseDown={this.handleMouseDown}\n                    onMouseEnter={this.handleMouseEnter}\n                    onRef={ref => (this[`node-${rowIdx}-${nodeIdx}`] = ref)}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n","import { nodeType } from \"../components/Node\";\n\nexport function randomWall(grid) {\n  let mazeNodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      // generate wall on default node\n      if (node.type === nodeType.DEFAULT) {\n        if (Math.random() >= 0.65) {\n          node.type = nodeType.WALL; // set type\n          mazeNodes.push(node);\n        }\n      }\n    }\n  }\n  return mazeNodes;\n}\n\nexport function randomWeight(grid) {\n  let mazeNodes = [];\n  const weights = [\n    nodeType.WEIGHT_THREE,\n    nodeType.WEIGHT_FIVE,\n    nodeType.WEIGHT_EIGHT\n  ];\n  for (const row of grid) {\n    for (const node of row) {\n      // generate differnet weights on default node\n      if (node.type === nodeType.DEFAULT) {\n        if (Math.random() >= 0.4) {\n          // randomly choose a weight\n          const weightType = weights[Math.floor(Math.random() * 3)];\n          let weight =\n            weightType === nodeType.WEIGHT_THREE\n              ? 3\n              : weightType === nodeType.WEIGHT_FIVE\n              ? 5\n              : weightType === nodeType.WEIGHT_EIGHT\n              ? 8\n              : 3;\n          node.weight = weight; // set weight\n          node.type = weightType; // set type\n          mazeNodes.push(node);\n        }\n      }\n    }\n  }\n  return mazeNodes;\n}\n","import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Dropdown } from \"react-bootstrap\";\nimport \"./Navbar.css\";\n\nclass Navitem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: props.name, type: props.type };\n  }\n\n  render() {\n    const { type } = this.state;\n    if (type === \"button\") {\n      return (\n        <li>\n          <Button id=\"button\" onClick={() => this.props.onClick()}>\n            {this.state.name}\n          </Button>\n        </li>\n      );\n    } else {\n      return (\n        <li>\n          <Dropdown>\n            <Dropdown.Toggle id=\"dropdown-toggle\">\n              {this.state.name + \" : \" + this.props.curItem + \"  \"}\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              {this.props.itemList.map(item => {\n                return (\n                  <Dropdown.Item\n                    key={item}\n                    onSelect={() => this.props.onChangeItem(item)}\n                    id=\"dropdown-item\"\n                  >\n                    {item}\n                  </Dropdown.Item>\n                );\n              })}\n            </Dropdown.Menu>\n          </Dropdown>\n        </li>\n      );\n    }\n  }\n}\n\nexport default Navitem;\n","import React, { Component } from \"react\";\nimport { Navbar } from \"react-bootstrap\";\nimport { Nav } from \"react-bootstrap\";\nimport Grid from \"./Grid\";\nimport { nodeType } from \"./Node\";\nimport Navitem from \"./Navitem\";\nimport select from \"../imgs/select.svg\";\nimport visual from \"../imgs/visual.svg\";\nimport add from \"../imgs/add.svg\";\nimport \"./Navbar.css\";\n\nconst algorithms = [\n  \"Dijkstra\",\n  \"A* Search\",\n  \"Greedy Best-First Search\",\n  \"Depth-First Search\",\n  \"Breadth-First Search\"\n];\n\nconst maze = [\n  \"Random Wall\",\n  \"Random Weight\",\n  \"Random Traversal\",\n  \"Depth-First Search\",\n  \"Recursive Division\"\n];\n\nconst weights = [\"Wall\", \"Weight 3\", \"Weight 5\", \"Weight 8\"];\n\nconst speeds = [\"Fast\", \"Medium\", \"Slow\"];\n\nclass PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      curAlgorithm: \"Dijkstra\",\n      curSpeed: \"Fast\",\n      curNodeType: \"Wall\",\n      curMaze: \"Random Wall\"\n    };\n  }\n\n  handleChangeAlgorithm = algorithm => {\n    this.setState({ curAlgorithm: algorithm });\n  };\n\n  handleChangeMaze = mazeType => {\n    this.setState({ curMaze: mazeType });\n  };\n\n  handleChangeSpeed = speedname => {\n    this.setState({ curSpeed: speedname });\n  };\n\n  handleChangeNodeType = nodetype => {\n    this.setState({ curNodeType: nodetype });\n  };\n\n  handleReset = () => {\n    this.grid.resetGrid();\n  };\n\n  handleGenerateMaze = () => {\n    this.grid.generateMaze(this.state.curMaze);\n  };\n\n  handleVisualize = () => {\n    let speed = 12;\n    switch (this.state.curSpeed) {\n      case \"Fast\":\n        speed = 12;\n        break;\n      case \"Medium\":\n        speed = 16;\n        break;\n      case \"Slow\":\n        speed = 20;\n        break;\n      default:\n        speed = 12;\n        break;\n    }\n    if (window.innerWidth > 1440) {\n      speed = speed / 2;\n    }\n    this.grid.visualize(this.state.curAlgorithm, speed);\n  };\n\n  render() {\n    let row = Math.ceil(window.innerHeight / 25) - 9;\n    let col = Math.ceil(window.innerWidth / 25) + 1;\n    let nodetype =\n      this.state.curNodeType === \"Weight 3\"\n        ? nodeType.WEIGHT_THREE\n        : this.state.curNodeType === \"Weight 5\"\n        ? nodeType.WEIGHT_FIVE\n        : this.state.curNodeType === \"Weight 8\"\n        ? nodeType.WEIGHT_EIGHT\n        : nodeType.WALL;\n    return (\n      <div>\n        <Navbar variant=\"custom\">\n          <Navbar.Brand href=\"#home\">Pathfinding Visualizer</Navbar.Brand>\n          <Nav>\n            <Navitem\n              name={\"Visualize\"}\n              type={\"button\"}\n              onClick={this.handleVisualize}\n            />\n            <Navitem\n              name={\"Generate Maze\"}\n              type={\"button\"}\n              onClick={this.handleGenerateMaze}\n            />\n            <Navitem\n              name={\"Reset\"}\n              type={\"button\"}\n              onClick={this.handleReset}\n            />\n            <Navitem\n              name={\"Algorithms\"}\n              type={\"dropdown\"}\n              itemList={algorithms}\n              curItem={this.state.curAlgorithm}\n              onChangeItem={this.handleChangeAlgorithm}\n            />\n            <Navitem\n              name={\"Maze\"}\n              type={\"dropdown\"}\n              itemList={maze}\n              curItem={this.state.curMaze}\n              onChangeItem={this.handleChangeMaze}\n            />\n            <Navitem\n              name={\"Add Node\"}\n              type={\"dropdown\"}\n              itemList={weights}\n              curItem={this.state.curNodeType}\n              onChangeItem={this.handleChangeNodeType}\n            />\n            <Navitem\n              name={\"Speed\"}\n              type={\"dropdown\"}\n              itemList={speeds}\n              curItem={this.state.curSpeed}\n              onChangeItem={this.handleChangeSpeed}\n            />\n          </Nav>\n        </Navbar>\n        <div id=\"info\">\n          <ul>\n            <li>\n              <div className=\"start\"></div>\n              Start Node\n            </li>\n            <li>\n              <div className=\"end\"></div>\n              End Node\n            </li>\n            <li>\n              <div className=\"wall\"></div>\n              Wall Node\n            </li>\n            <li>\n              <div className=\"weight3\"></div>\n              Weight 3\n            </li>\n            <li>\n              <div className=\"weight5\"></div>\n              Weight 5\n            </li>\n            <li>\n              <div className=\"weight8\"></div>\n              Weight 8\n            </li>\n            <li>\n              <div className=\"unvisited-node\"></div>\n              Unvisited Node\n            </li>\n            <li>\n              <div className=\"visited-node\"></div>\n              Visited Node\n            </li>\n            <li>\n              <div className=\"path-node\"></div>\n              Path Node\n            </li>\n          </ul>\n        </div>\n        <div className=\"instruction\">\n          <ul>\n            <li>\n              <img src={select} alt=\"select\" />\n              <div> Pick an Algorithm </div>\n            </li>\n          </ul>\n          <ul>\n            <li>\n              <img src={add} alt=\"select\" />\n              <div id=\"middle\"> Add Wall, Weighted Nodes or Generate Maze </div>\n            </li>\n          </ul>\n          <ul>\n            <li>\n              <img src={visual} alt=\"select\" />\n              <div> Visualize and Enjoy! </div>\n            </li>\n          </ul>\n        </div>\n        <Grid\n          rows={row}\n          cols={col}\n          algorithm={this.state.curAlgorithm}\n          nodetype={nodetype}\n          onRef={ref => (this.grid = ref)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default PathfindingVisualizer;\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./components/PathfindingVisualizer\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"typeface-roboto\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}