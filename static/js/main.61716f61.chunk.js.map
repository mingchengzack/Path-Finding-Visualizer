{"version":3,"sources":["components/Node.jsx","algorithms/dijkstra.js","algorithms/dfs.js","algorithms/bfs.js","components/Grid.jsx","components/Navitem.jsx","components/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","preventDragHandler","e","preventDefault","setWeightType","weight","setState","setNode","type","state","x","node","y","weightType","DEFAULT","canModify","this","onRef","undefined","typename","nodeType","START","END","WALL","VISITED","PATH","VISITED_NOANIMATION","PATH_NOANIMATION","weightname","WEIGHT_THREE","WEIGHT_FIVE","WEIGHT_EIGHT","className","onMouseDown","onMouseEnter","onMouseUp","onDragStart","Component","dijkstra","grid","startNode","endNode","visitedNodes","unvisitedNodes","row","push","distance","length","sort","nodeA","nodeB","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","dijkstraPath","nodesInShortestPath","currNode","prevNode","unshift","neighbors","unvisitedNeighbors","filter","neighbor","DEFAULT_START_X","DEFAULT_START_Y","DEFAULT_END_X","DEFAULT_END_Y","Grid","handleMouseDown","isMousePressed","clickedNode","toggleWall","toggleWeight","modfiedNodes","handleMouseEnter","moveStartorEndNode","handleMouseUp","i","constructInitGrid","algorithm","rows","cols","j","speed","resetGridforVisualize","calculateVisualizedNodes","nodesInPath","animateNodes","curNode","dfs","bfs","setTimeout","new_type","new_weight","w","prevX","prevY","adaptAlgorithm","map","rowIdx","key","id","nodeIdx","ref","Navitem","name","Button","onClick","Dropdown","Toggle","curItem","Menu","itemList","item","Item","onSelect","onChangeItem","algorithms","weights","speeds","PathfindingVisualizer","handleChangeAlgorithm","curAlgorithm","handleChangeSpeed","speedName","curSpeed","handleChangeWeight","curWeight","handleReset","resetGrid","handleVisualize","visualize","Navbar","variant","Brand","href","Nav","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61716f61.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x: props.node.x,\n      y: props.node.y,\n      type: props.node.type,\n      weight: weightType.DEFAULT,\n      canModify: true\n    };\n  }\n\n  componentDidMount() {\n    this.props.onRef(this);\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  preventDragHandler = e => {\n    e.preventDefault();\n  };\n\n  setWeightType = weight => {\n    this.setState({ weight });\n  };\n\n  setNode = type => {\n    this.setState({ type });\n  };\n\n  render() {\n    let { type } = this.state;\n    let typename =\n      type === nodeType.START\n        ? \"node-start\"\n        : type === nodeType.END\n        ? \"node-end\"\n        : type === nodeType.WALL\n        ? \"node-wall\"\n        : type === nodeType.VISITED\n        ? \"node-visited\"\n        : type === nodeType.PATH\n        ? \"node-path\"\n        : type === nodeType.VISITED_NOANIMATION\n        ? \"node-visited-nonanimated\"\n        : type === nodeType.PATH_NOANIMATION\n        ? \"node-path-nonanimated\"\n        : \"\";\n\n    let { weight } = this.state;\n    let weightname =\n      weight === weightType.WEIGHT_THREE\n        ? \"node-three\"\n        : weight === weightType.WEIGHT_FIVE\n        ? \"node-five\"\n        : weight === weightType.WEIGHT_EIGHT\n        ? \"node-eight\"\n        : \"\";\n\n    return (\n      <div\n        className={`node ${typename}`}\n        onMouseDown={() => this.props.onMouseDown(this.state)}\n        onMouseEnter={() => this.props.onMouseEnter(this.state)}\n        onMouseUp={() => this.props.onMouseUp()}\n        onDragStart={this.preventDragHandler}\n      >\n        <div className={`${weightname}`}></div>\n      </div>\n    );\n  }\n}\n\nexport default Node;\nexport const nodeType = {\n  DEFAULT: 1,\n  START: 2,\n  END: 3,\n  WALL: 4,\n  VISITED: 5,\n  PATH: 6,\n  VISITED_NOANIMATION: 7,\n  PATH_NOANIMATION: 8\n};\n\nexport const weightType = {\n  DEFAULT: 1,\n  WEIGHT_THREE: 2,\n  WEIGHT_FIVE: 3,\n  WEIGHT_EIGHT: 4\n};\n","import { nodeType } from \"../components/Node\";\n\n// performs Dijkstra's algorithm\nexport function dijkstra(grid, startNode, endNode) {\n  let visitedNodes = [];\n  let unvisitedNodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      unvisitedNodes.push(node);\n    }\n  }\n  startNode.distance = 0;\n  while (unvisitedNodes.length !== 0) {\n    // sort the nodes by distance\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n    const closestNode = unvisitedNodes.shift();\n\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodes;\n\n    closestNode.isVisited = true;\n    if (closestNode === endNode) return visitedNodes;\n\n    // excludes start node for visualization\n    if (closestNode !== startNode) {\n      visitedNodes.push(closestNode);\n    }\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n  return visitedNodes;\n}\n\n// backtracks from the endNode to find the shortest path\nexport function dijkstraPath(startNode, endNode) {\n  const nodesInShortestPath = [];\n  let currNode = endNode.prevNode; // excludes end node for visualization\n\n  // excludes start node for visualization\n  while (currNode !== null && currNode !== startNode) {\n    nodesInShortestPath.unshift(currNode);\n    currNode = currNode.prevNode;\n  }\n  return nodesInShortestPath;\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  let neighbors = [];\n  const { x, y } = node;\n  if (y > 0) neighbors.push(grid[y - 1][x]);\n  if (y < grid.length - 1) neighbors.push(grid[y + 1][x]);\n  if (x > 0) neighbors.push(grid[y][x - 1]);\n  if (x < grid[0].length - 1) neighbors.push(grid[y][x + 1]);\n  const unvisitedNeighbors = neighbors.filter(\n    neighbor => !neighbor.isVisited && neighbor.type !== nodeType.WALL\n  );\n\n  for (const neighbor of unvisitedNeighbors) {\n    if (node.distance + neighbor.weight < neighbor.distance) {\n      neighbor.distance = node.distance + neighbor.weight;\n      neighbor.prevNode = node;\n    }\n  }\n}\n","import { nodeType } from \"../components/Node\";\n\n// performs depth first search algorithm\nexport function dfs(grid, startNode, endNode) {\n  const visitedNodes = [];\n  let unvisitedNodes = [];\n  unvisitedNodes.push(startNode);\n  while (unvisitedNodes.length !== 0) {\n    // get next cur node\n    const curNode = unvisitedNodes.shift();\n\n    // stack may contain two same nodes\n    if (!curNode.isVisited) {\n      curNode.isVisited = true;\n      if (curNode === endNode) return [visitedNodes, true];\n\n      // excludes start node  and end node for visualization\n      if (curNode !== startNode) {\n        visitedNodes.push(curNode);\n      }\n\n      // add neighbors to unvisitedNodes\n      updateUnvisitedNeighbors(curNode, grid, unvisitedNodes);\n    }\n  }\n\n  return [visitedNodes, false];\n}\n\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\n  const { x, y } = node;\n  if (\n    x > 0 &&\n    !grid[y][x - 1].isVisited &&\n    grid[y][x - 1].type !== nodeType.WALL\n  )\n    unvisitedNodes.unshift(grid[y][x - 1]);\n  if (\n    y < grid.length - 1 &&\n    !grid[y + 1][x].isVisited &&\n    grid[y + 1][x].type !== nodeType.WALL\n  )\n    unvisitedNodes.unshift(grid[y + 1][x]);\n  if (\n    x < grid[0].length - 1 &&\n    !grid[y][x + 1].isVisited &&\n    grid[y][x + 1].type !== nodeType.WALL\n  )\n    unvisitedNodes.unshift(grid[y][x + 1]);\n  if (\n    y > 0 &&\n    !grid[y - 1][x].isVisited &&\n    grid[y - 1][x].type !== nodeType.WALL\n  )\n    unvisitedNodes.unshift(grid[y - 1][x]);\n}\n","import { nodeType } from \"../components/Node\";\n\n// performs breadth first search algorithm\nexport function bfs(grid, startNode, endNode) {\n  const visitedNodes = [];\n  let unvisitedNodes = [];\n  unvisitedNodes.push(startNode);\n  startNode.isVisited = true;\n  while (unvisitedNodes.length !== 0) {\n    // get next cur node\n    const curNode = unvisitedNodes.shift();\n\n    // reach goal\n    if (curNode === endNode) return [visitedNodes, true];\n\n    // add neighbors to unvisitedNodes\n    updateUnvisitedNeighbors(curNode, grid, unvisitedNodes);\n\n    // excludes start node  and end node for visualization\n    if (curNode !== startNode) {\n      visitedNodes.push(curNode);\n    }\n  }\n\n  return [visitedNodes, false];\n}\n\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\n  const { x, y } = node;\n  if (\n    x > 0 &&\n    !grid[y][x - 1].isVisited &&\n    grid[y][x - 1].type !== nodeType.WALL\n  ) {\n    grid[y][x - 1].isVisited = true;\n    unvisitedNodes.push(grid[y][x - 1]);\n  }\n  if (\n    y < grid.length - 1 &&\n    !grid[y + 1][x].isVisited &&\n    grid[y + 1][x].type !== nodeType.WALL\n  ) {\n    grid[y + 1][x].isVisited = true;\n    unvisitedNodes.push(grid[y + 1][x]);\n  }\n  if (\n    x < grid[0].length - 1 &&\n    !grid[y][x + 1].isVisited &&\n    grid[y][x + 1].type !== nodeType.WALL\n  ) {\n    grid[y][x + 1].isVisited = true;\n    unvisitedNodes.push(grid[y][x + 1]);\n  }\n  if (\n    y > 0 &&\n    !grid[y - 1][x].isVisited &&\n    grid[y - 1][x].type !== nodeType.WALL\n  ) {\n    grid[y - 1][x].isVisited = true;\n    unvisitedNodes.push(grid[y - 1][x]);\n  }\n}\n","import React, { Component } from \"react\";\nimport Node, { nodeType, weightType } from \"./Node\";\nimport { dijkstra, dijkstraPath } from \"../algorithms/dijkstra\";\nimport { astar } from \"../algorithms/astar\";\nimport { dfs } from \"../algorithms/dfs\";\nimport { bfs } from \"../algorithms/bfs\";\n\nimport \"./Node.css\";\n\nconst DEFAULT_START_X = 14;\nconst DEFAULT_START_Y = 12;\nconst DEFAULT_END_X = 36;\nconst DEFAULT_END_Y = 12;\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.grid = this.constructInitGrid();\n    this.startNode = this.grid[DEFAULT_START_Y][DEFAULT_START_X];\n    this.endNode = this.grid[DEFAULT_END_Y][DEFAULT_END_X];\n    this.isMousePressed = false;\n    this.algorithm = null;\n    this.clickedNode = null;\n    this.modfiedNodes = [];\n  }\n\n  componentDidMount() {\n    this.props.onRef(this);\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  resetGrid() {\n    let rows = this.props.rows;\n    let cols = this.props.cols;\n    this.algorithm = null;\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (\n          this.grid[i][j].type !== nodeType.START &&\n          this.grid[i][j].type !== nodeType.END\n        ) {\n          this.grid[i][j].type = nodeType.DEFAULT;\n          this.grid[i][j].weight = 1;\n          this[`node-${i}-${j}`].setNode(nodeType.DEFAULT);\n          this[`node-${i}-${j}`].setWeightType(weightType.DEFAULT);\n        }\n      }\n    }\n  }\n\n  resetGridforVisualize() {\n    let rows = this.props.rows;\n    let cols = this.props.cols;\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        this.grid[i][j].prevNode = null;\n        this.grid[i][j].distance = Infinity;\n        this.grid[i][j].isVisited = false;\n        if (\n          this.grid[i][j].type === nodeType.VISITED ||\n          this.grid[i][j].type === nodeType.PATH\n        ) {\n          this.grid[i][j].type = nodeType.DEFAULT;\n          this[`node-${i}-${j}`].setNode(nodeType.DEFAULT);\n        }\n      }\n    }\n  }\n\n  visualize(algorithm, speed) {\n    // reset the internal of the grid\n    // and clear previous visualization\n    this.resetGridforVisualize();\n    this.algorithm = algorithm;\n    const [visitedNodes, nodesInPath] = this.calculateVisualizedNodes(\n      algorithm\n    );\n    this.animateNodes(visitedNodes, nodesInPath, speed);\n  }\n\n  adaptAlgorithm() {\n    this.resetGridforVisualize();\n    const [visitedNodes, nodesInPath] = this.calculateVisualizedNodes(\n      this.props.algorithm\n    );\n\n    for (let i = 0; i < visitedNodes.length + nodesInPath.length; i++) {\n      let node;\n      if (i < visitedNodes.length) {\n        node = visitedNodes[i];\n        node.type = nodeType.VISITED;\n        this[`node-${node.y}-${node.x}`].setNode(nodeType.VISITED_NOANIMATION);\n      } else {\n        node = nodesInPath[i - visitedNodes.length];\n        node.type = nodeType.PATH;\n        this[`node-${node.y}-${node.x}`].setNode(nodeType.PATH_NOANIMATION);\n      }\n    }\n  }\n\n  calculateVisualizedNodes(algorithm) {\n    let visitedNodes, nodesInPath, find;\n    switch (algorithm) {\n      case \"Dijkstra\":\n        visitedNodes = dijkstra(this.grid, this.startNode, this.endNode);\n        nodesInPath = dijkstraPath(this.startNode, this.endNode);\n        break;\n      case \"A* Search\":\n        break;\n      case \"Depth First Search\":\n        [visitedNodes, find] = dfs(this.grid, this.startNode, this.endNode);\n        nodesInPath = find ? visitedNodes : [];\n        break;\n      case \"Breadth First Search\":\n        [visitedNodes, find] = bfs(this.grid, this.startNode, this.endNode);\n        nodesInPath = find ? visitedNodes : [];\n        break;\n      default:\n        visitedNodes = dijkstra(this.grid, this.startNode, this.endNode);\n        nodesInPath = dijkstraPath(this.startNode, this.endNode);\n        break;\n    }\n    return [visitedNodes, nodesInPath];\n  }\n\n  animateNodes(visitedNodes, nodesInPath, speed) {\n    for (let i = 0; i <= visitedNodes.length; i++) {\n      if (i === visitedNodes.length) {\n        setTimeout(() => {\n          for (let j = 0; j < nodesInPath.length; j++) {\n            setTimeout(() => {\n              const node = nodesInPath[j];\n              node.type = nodeType.PATH;\n              this[`node-${node.y}-${node.x}`].setNode(nodeType.PATH);\n            }, 10 + 2 * speed * j);\n          }\n        }, 10 + speed * i);\n      } else {\n        setTimeout(() => {\n          const node = visitedNodes[i];\n          node.type = nodeType.VISITED;\n          this[`node-${node.y}-${node.x}`].setNode(nodeType.VISITED);\n        }, 10 + speed * i);\n      }\n    }\n  }\n\n  toggleWall(node) {\n    let new_type = node.type;\n    if (\n      node.type === nodeType.DEFAULT ||\n      node.type === nodeType.VISITED ||\n      node.type === nodeType.VISITED_NOANIMATION ||\n      node.type === nodeType.PATH ||\n      node.type === nodeType.PATH_NOANIMATION\n    ) {\n      new_type = nodeType.WALL;\n      this.grid[node.y][node.x].weight = Infinity;\n      this[`node-${node.y}-${node.x}`].setWeightType(weightType.DEFAULT);\n    } else if (\n      node.type === nodeType.WALL ||\n      node.type === nodeType.WEIGHT_THREE ||\n      node.type === nodeType.WEIGHT_FIVE ||\n      node.type === nodeType.WEIGHT_EIGHT\n    ) {\n      new_type = nodeType.DEFAULT;\n    }\n\n    this.grid[node.y][node.x].type = new_type;\n    this[`node-${node.y}-${node.x}`].setNode(new_type);\n  }\n\n  toggleWeight(node) {\n    if (\n      node.type !== nodeType.START &&\n      node.type !== nodeType.END &&\n      node.type !== nodeType.WALL\n    ) {\n      let new_weight;\n      if (node.weight === weightType.DEFAULT) {\n        new_weight = this.props.weight;\n      } else {\n        new_weight = weightType.DEFAULT;\n      }\n\n      let w =\n        new_weight === weightType.WEIGHT_THREE\n          ? 3\n          : new_weight === weightType.WEIGHT_FIVE\n          ? 5\n          : new_weight === weightType.WEIGHT_EIGHT\n          ? 8\n          : 1;\n\n      this.grid[node.y][node.x].weight = w;\n      this[`node-${node.y}-${node.x}`].setWeightType(new_weight);\n    }\n  }\n\n  moveStartorEndNode(node) {\n    if (\n      node.type !== nodeType.WALL &&\n      node.type !== nodeType.START &&\n      node.type !== nodeType.END &&\n      node.weight === weightType.DEFAULT\n    ) {\n      const prevX = this.clickedNode.x;\n      const prevY = this.clickedNode.y;\n      const { x, y } = node;\n      this[`node-${prevY}-${prevX}`].setNode(nodeType.DEFAULT);\n      this.grid[prevY][prevX].type = nodeType.DEFAULT;\n      this[`node-${y}-${x}`].setNode(this.clickedNode.type);\n      this.grid[y][x].type = this.clickedNode.type;\n      if (this.grid[y][x].type === nodeType.START) {\n        this.startNode = this.grid[y][x];\n      } else {\n        this.endNode = this.grid[y][x];\n      }\n      this.clickedNode.x = x;\n      this.clickedNode.y = y;\n\n      if (this.algorithm) {\n        this.adaptAlgorithm();\n      }\n    }\n  }\n\n  handleMouseDown = node => {\n    this.isMousePressed = true;\n\n    // copy the node state\n    this.clickedNode = {\n      ...node\n    };\n\n    if (this.props.weight === weightType.DEFAULT) {\n      this.toggleWall(node);\n    } else {\n      this.toggleWeight(node);\n    }\n\n    // can only modify the node once (for non-start, non-end nodes)\n    if (\n      this.clickedNode.type !== nodeType.START &&\n      this.clickedNode.type !== nodeType.END\n    ) {\n      node.canModify = false;\n      this.modfiedNodes.push(node);\n    }\n  };\n\n  handleMouseEnter = node => {\n    // can only modify the node once\n    if (!this.isMousePressed || !node.canModify) return;\n    if (\n      this.clickedNode.type !== nodeType.START &&\n      this.clickedNode.type !== nodeType.END\n    ) {\n      if (this.props.weight === weightType.DEFAULT) {\n        this.toggleWall(node);\n      } else {\n        this.toggleWeight(node);\n      }\n\n      // set the flag so that the node cannot be modified\n      node.canModify = false;\n      this.modfiedNodes.push(node);\n    } else {\n      this.moveStartorEndNode(node);\n    }\n  };\n\n  handleMouseUp = () => {\n    this.isMousePressed = false;\n    this.clickedNode = null;\n\n    // reset all the modified nodes to can-modifiy\n    for (let i = 0; i < this.modfiedNodes.length; i++) {\n      const node = this.modfiedNodes[i];\n      this[`node-${node.y}-${node.x}`].setState({ canModify: true });\n    }\n    this.modfiedNodes = [];\n  };\n\n  constructInitGrid() {\n    let rows = this.props.rows;\n    let cols = this.props.cols;\n    let grid = [];\n\n    for (let i = 0; i < rows; i++) {\n      let row = [];\n      for (let j = 0; j < cols; j++) {\n        const type =\n          j === DEFAULT_START_X && i === DEFAULT_START_Y\n            ? nodeType.START\n            : j === DEFAULT_END_X && i === DEFAULT_END_Y\n            ? nodeType.END\n            : nodeType.DEFAULT;\n        let node = {\n          x: j,\n          y: i,\n          type: type,\n          isVisited: false,\n          distance: Infinity,\n          weight: 1,\n          prevNode: null\n        };\n        row.push(node);\n      }\n      grid.push(row);\n    }\n    return grid;\n  }\n\n  render() {\n    return (\n      <div className=\"grid\">\n        {this.grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx} id=\"row\">\n              {row.map((node, nodeIdx) => {\n                return (\n                  <Node\n                    key={nodeIdx}\n                    id={`node-${rowIdx}-${nodeIdx}`}\n                    node={node}\n                    onMouseDown={this.handleMouseDown}\n                    onMouseEnter={this.handleMouseEnter}\n                    onMouseUp={this.handleMouseUp}\n                    onRef={ref => (this[`node-${rowIdx}-${nodeIdx}`] = ref)}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n","import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Dropdown } from \"react-bootstrap\";\nimport \"./Navbar.css\";\n\nclass Navitem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: props.name, type: props.type };\n  }\n\n  render() {\n    const { type } = this.state;\n    if (type === \"button\") {\n      return (\n        <li>\n          <Button id=\"button\" onClick={() => this.props.onClick()}>\n            {this.state.name}\n          </Button>\n        </li>\n      );\n    } else {\n      return (\n        <li>\n          <Dropdown>\n            <Dropdown.Toggle id=\"dropdown-toggle\">\n              {this.state.name + \" : \" + this.props.curItem + \"  \"}\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              {this.props.itemList.map(item => {\n                return (\n                  <Dropdown.Item\n                    key={item}\n                    onSelect={() => this.props.onChangeItem(item)}\n                    id=\"dropdown-item\"\n                  >\n                    {item}\n                  </Dropdown.Item>\n                );\n              })}\n            </Dropdown.Menu>\n          </Dropdown>\n        </li>\n      );\n    }\n  }\n}\n\nexport default Navitem;\n","import React, { Component } from \"react\";\nimport Grid from \"./Grid\";\nimport { Navbar } from \"react-bootstrap\";\nimport { Nav } from \"react-bootstrap\";\nimport { weightType } from \"./Node\";\nimport Navitem from \"./Navitem\";\nimport \"./Navbar.css\";\n\nconst algorithms = [\n  \"Dijkstra\",\n  \"A* Search\",\n  \"Depth First Search\",\n  \"Breadth First Search\"\n];\n\nconst weights = [\"Wall\", \"Weight 3\", \"Weight 5\", \"Weight 8\"];\n\nconst speeds = [\"Fast\", \"Medium\", \"Slow\"];\n\nclass PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      curAlgorithm: \"Dijkstra\",\n      curSpeed: \"Fast\",\n      curWeight: \"Wall\"\n    };\n  }\n\n  handleChangeAlgorithm = algorithm => {\n    this.setState({ curAlgorithm: algorithm });\n  };\n\n  handleChangeSpeed = speedName => {\n    this.setState({ curSpeed: speedName });\n  };\n\n  handleChangeWeight = weightname => {\n    this.setState({ curWeight: weightname });\n  };\n\n  handleReset = () => {\n    this.grid.resetGrid();\n  };\n\n  handleVisualize = () => {\n    let speed = 12;\n    switch (this.state.curSpeed) {\n      case \"Fast\":\n        speed = 12;\n        break;\n      case \"Medium\":\n        speed = 16;\n        break;\n      case \"Slow\":\n        speed = 20;\n        break;\n      default:\n        speed = 12;\n        break;\n    }\n    this.grid.visualize(this.state.curAlgorithm, speed);\n  };\n\n  render() {\n    let weight =\n      this.state.curWeight === \"Weight 3\"\n        ? weightType.WEIGHT_THREE\n        : this.state.curWeight === \"Weight 5\"\n        ? weightType.WEIGHT_FIVE\n        : this.state.curWeight === \"Weight 8\"\n        ? weightType.WEIGHT_EIGHT\n        : weightType.DEFAULT;\n    return (\n      <div>\n        <Navbar variant=\"custom\">\n          <Navbar.Brand href=\"#home\">Pathfinding Visualizer</Navbar.Brand>\n          <Nav>\n            <Navitem\n              name={\"Visualize\"}\n              type={\"button\"}\n              onClick={this.handleVisualize}\n            />\n            <Navitem\n              name={\"Reset Board\"}\n              type={\"button\"}\n              onClick={this.handleReset}\n            />\n            <Navitem\n              name={\"Add Node\"}\n              type={\"dropdown\"}\n              itemList={weights}\n              curItem={this.state.curWeight}\n              onChangeItem={this.handleChangeWeight}\n            />\n            <Navitem\n              name={\"Algorithms\"}\n              type={\"dropdown\"}\n              itemList={algorithms}\n              curItem={this.state.curAlgorithm}\n              onChangeItem={this.handleChangeAlgorithm}\n            />\n            <Navitem\n              name={\"Speed\"}\n              type={\"dropdown\"}\n              itemList={speeds}\n              curItem={this.state.curSpeed}\n              onChangeItem={this.handleChangeSpeed}\n            />\n          </Nav>\n        </Navbar>\n        <Grid\n          rows={24}\n          cols={54}\n          algorithm={this.state.curAlgorithm}\n          weight={weight}\n          onRef={ref => (this.grid = ref)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default PathfindingVisualizer;\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./components/PathfindingVisualizer\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"typeface-roboto\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}