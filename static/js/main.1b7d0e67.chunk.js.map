{"version":3,"sources":["components/Node.jsx","algorithms/dijkstra.js","algorithms/dfs.js","algorithms/bfs.js","components/Grid.jsx","components/Navitem.jsx","components/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","preventDragHandler","e","preventDefault","handleChangeNode","new_type","state","type","nodeType","START","END","weight","weightType","DEFAULT","toggleWall","toggleWeight","onMouseDown","setWeightType","setState","setNode","x","node","y","canModify","this","onRef","undefined","VISITED","VISITED_NOANIMATION","PATH","PATH_NOANIMATION","WALL","WEIGHT_THREE","WEIGHT_FIVE","WEIGHT_EIGHT","typename","weightname","className","onMouseEnter","onMouseUp","onDragStart","Component","dijkstra","grid","startNode","endNode","visitedNodes","unvisitedNodes","row","push","distance","length","sort","nodeA","nodeB","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","dijkstraPath","nodesInShortestPath","currNode","prevNode","unshift","neighbors","unvisitedNeighbors","filter","neighbor","DEFAULT_START_X","DEFAULT_START_Y","DEFAULT_END_X","DEFAULT_END_Y","Grid","handleMouseDown","isMousePressed","clickedNode","w","modfiedNodes","handleMouseEnter","moveStartorEndNode","handleMouseUp","i","constructInitGrid","algorithm","rows","cols","j","speed","resetGridforVisualize","calculateVisualizedNodes","nodesInPath","animateNodes","curNode","dfs","bfs","setTimeout","new_weight","prevX","prevY","adaptAlgorithm","map","rowIdx","key","id","nodeIdx","ref","Navitem","name","Button","onClick","Dropdown","Toggle","curItem","Menu","itemList","item","Item","onSelect","onChangeItem","algorithms","weights","speeds","PathfindingVisualizer","handleChangeAlgorithm","curAlgorithm","handleChangeSpeed","speedName","curSpeed","handleChangeWeight","curWeight","changeWeightType","handleReset","resetGrid","handleVisualize","visualize","Navbar","variant","Brand","href","Nav","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b7d0e67.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x: props.node.x,\n      y: props.node.y,\n      type: props.node.type,\n      weight: props.weight,\n      canModify: true\n    };\n  }\n\n  componentDidMount() {\n    this.props.onRef(this);\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  preventDragHandler = e => {\n    e.preventDefault();\n  };\n\n  toggleWall() {\n    let new_type = this.state.type;\n    if (\n      this.state.type === nodeType.DEFAULT ||\n      this.state.type === nodeType.VISITED ||\n      this.state.type === nodeType.VISITED_NOANIMATION ||\n      this.state.type === nodeType.PATH ||\n      this.state.type === nodeType.PATH_NOANIMATION\n    ) {\n      new_type = nodeType.WALL;\n      this.setState({ weight: weightType.DEFAULT });\n    } else if (\n      this.state.type === nodeType.WALL ||\n      this.state.type === nodeType.WEIGHT_THREE ||\n      this.state.type === nodeType.WEIGHT_FIVE ||\n      this.state.type === nodeType.WEIGHT_EIGHT\n    ) {\n      new_type = nodeType.DEFAULT;\n    }\n    this.setState({ type: new_type });\n    return new_type;\n  }\n\n  toggleWeight() {\n    if (this.state.weight === weightType.DEFAULT) {\n      if (this.state.type !== nodeType.WALL) {\n        this.setState({ weight: this.props.weight });\n      }\n    } else {\n      this.setState({ weight: weightType.DEFAULT });\n    }\n  }\n\n  handleChangeNode = () => {\n    let new_type = this.state.type;\n    if (\n      this.state.type !== nodeType.START &&\n      this.state.type !== nodeType.END\n    ) {\n      if (this.props.weight === weightType.DEFAULT) {\n        new_type = this.toggleWall();\n      } else {\n        this.toggleWeight();\n      }\n    }\n    this.props.onMouseDown(this.state, new_type);\n  };\n\n  setWeightType = weight => {\n    this.setState({ weight });\n  };\n\n  setNode = type => {\n    this.setState({ type });\n  };\n\n  render() {\n    let { type } = this.state;\n    let typename =\n      type === nodeType.START\n        ? \"node-start\"\n        : type === nodeType.END\n        ? \"node-end\"\n        : type === nodeType.WALL\n        ? \"node-wall\"\n        : type === nodeType.VISITED\n        ? \"node-visited\"\n        : type === nodeType.PATH\n        ? \"node-path\"\n        : type === nodeType.VISITED_NOANIMATION\n        ? \"node-visited-nonanimated\"\n        : type === nodeType.PATH_NOANIMATION\n        ? \"node-path-nonanimated\"\n        : \"\";\n\n    let { weight } = this.state;\n    let weightname =\n      weight === weightType.WEIGHT_THREE\n        ? \"node-three\"\n        : weight === weightType.WEIGHT_FIVE\n        ? \"node-five\"\n        : weight === weightType.WEIGHT_EIGHT\n        ? \"node-eight\"\n        : \"\";\n\n    return (\n      <div\n        className={`node ${typename}`}\n        onMouseDown={() => this.handleChangeNode()}\n        onMouseEnter={() => this.props.onMouseEnter(this.state)}\n        onMouseUp={() => this.props.onMouseUp()}\n        onDragStart={this.preventDragHandler}\n      >\n        <div className={`${weightname}`}></div>\n      </div>\n    );\n  }\n}\n\nexport default Node;\nexport const nodeType = {\n  DEFAULT: 1,\n  START: 2,\n  END: 3,\n  WALL: 4,\n  VISITED: 5,\n  PATH: 6,\n  VISITED_NOANIMATION: 7,\n  PATH_NOANIMATION: 8\n};\n\nexport const weightType = {\n  DEFAULT: 1,\n  WEIGHT_THREE: 2,\n  WEIGHT_FIVE: 3,\n  WEIGHT_EIGHT: 4\n};\n","import { nodeType } from \"../components/Node\";\n\n// performs Dijkstra's algorithm\nexport function dijkstra(grid, startNode, endNode) {\n  let visitedNodes = [];\n  let unvisitedNodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      unvisitedNodes.push(node);\n    }\n  }\n  startNode.distance = 0;\n  while (unvisitedNodes.length !== 0) {\n    // sort the nodes by distance\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n    const closestNode = unvisitedNodes.shift();\n\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodes;\n\n    closestNode.isVisited = true;\n    if (closestNode === endNode) return visitedNodes;\n\n    // excludes start node for visualization\n    if (closestNode !== startNode) {\n      visitedNodes.push(closestNode);\n    }\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n  return visitedNodes;\n}\n\n// backtracks from the endNode to find the shortest path\nexport function dijkstraPath(startNode, endNode) {\n  const nodesInShortestPath = [];\n  let currNode = endNode.prevNode; // excludes end node for visualization\n\n  // excludes start node for visualization\n  while (currNode !== null && currNode !== startNode) {\n    nodesInShortestPath.unshift(currNode);\n    currNode = currNode.prevNode;\n  }\n  return nodesInShortestPath;\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  let neighbors = [];\n  const { x, y } = node;\n  if (y > 0) neighbors.push(grid[y - 1][x]);\n  if (y < grid.length - 1) neighbors.push(grid[y + 1][x]);\n  if (x > 0) neighbors.push(grid[y][x - 1]);\n  if (x < grid[0].length - 1) neighbors.push(grid[y][x + 1]);\n  const unvisitedNeighbors = neighbors.filter(\n    neighbor => !neighbor.isVisited && neighbor.type !== nodeType.WALL\n  );\n\n  for (const neighbor of unvisitedNeighbors) {\n    if (node.distance + neighbor.weight < neighbor.distance) {\n      neighbor.distance = node.distance + neighbor.weight;\n      neighbor.prevNode = node;\n    }\n  }\n}\n","import { nodeType } from \"../components/Node\";\n\n// performs depth first search algorithm\nexport function dfs(grid, startNode, endNode) {\n  const visitedNodes = [];\n  let unvisitedNodes = [];\n  unvisitedNodes.push(startNode);\n  while (unvisitedNodes.length !== 0) {\n    // get next cur node\n    const curNode = unvisitedNodes.shift();\n\n    // stack may contain two same nodes\n    if (!curNode.isVisited) {\n      curNode.isVisited = true;\n      if (curNode === endNode) return [visitedNodes, true];\n\n      // excludes start node  and end node for visualization\n      if (curNode !== startNode) {\n        visitedNodes.push(curNode);\n      }\n\n      // add neighbors to unvisitedNodes\n      updateUnvisitedNeighbors(curNode, grid, unvisitedNodes);\n    }\n  }\n\n  return [visitedNodes, false];\n}\n\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\n  const { x, y } = node;\n  if (\n    x > 0 &&\n    !grid[y][x - 1].isVisited &&\n    grid[y][x - 1].type !== nodeType.WALL\n  )\n    unvisitedNodes.unshift(grid[y][x - 1]);\n  if (\n    y < grid.length - 1 &&\n    !grid[y + 1][x].isVisited &&\n    grid[y + 1][x].type !== nodeType.WALL\n  )\n    unvisitedNodes.unshift(grid[y + 1][x]);\n  if (\n    x < grid[0].length - 1 &&\n    !grid[y][x + 1].isVisited &&\n    grid[y][x + 1].type !== nodeType.WALL\n  )\n    unvisitedNodes.unshift(grid[y][x + 1]);\n  if (\n    y > 0 &&\n    !grid[y - 1][x].isVisited &&\n    grid[y - 1][x].type !== nodeType.WALL\n  )\n    unvisitedNodes.unshift(grid[y - 1][x]);\n}\n","import { nodeType } from \"../components/Node\";\n\n// performs breadth first search algorithm\nexport function bfs(grid, startNode, endNode) {\n  const visitedNodes = [];\n  let unvisitedNodes = [];\n  unvisitedNodes.push(startNode);\n  startNode.isVisited = true;\n  while (unvisitedNodes.length !== 0) {\n    // get next cur node\n    const curNode = unvisitedNodes.shift();\n\n    // reach goal\n    if (curNode === endNode) return [visitedNodes, true];\n\n    // add neighbors to unvisitedNodes\n    updateUnvisitedNeighbors(curNode, grid, unvisitedNodes);\n\n    // excludes start node  and end node for visualization\n    if (curNode !== startNode) {\n      visitedNodes.push(curNode);\n    }\n  }\n\n  return [visitedNodes, false];\n}\n\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\n  const { x, y } = node;\n  if (\n    x > 0 &&\n    !grid[y][x - 1].isVisited &&\n    grid[y][x - 1].type !== nodeType.WALL\n  ) {\n    grid[y][x - 1].isVisited = true;\n    unvisitedNodes.push(grid[y][x - 1]);\n  }\n  if (\n    y < grid.length - 1 &&\n    !grid[y + 1][x].isVisited &&\n    grid[y + 1][x].type !== nodeType.WALL\n  ) {\n    grid[y + 1][x].isVisited = true;\n    unvisitedNodes.push(grid[y + 1][x]);\n  }\n  if (\n    x < grid[0].length - 1 &&\n    !grid[y][x + 1].isVisited &&\n    grid[y][x + 1].type !== nodeType.WALL\n  ) {\n    grid[y][x + 1].isVisited = true;\n    unvisitedNodes.push(grid[y][x + 1]);\n  }\n  if (\n    y > 0 &&\n    !grid[y - 1][x].isVisited &&\n    grid[y - 1][x].type !== nodeType.WALL\n  ) {\n    grid[y - 1][x].isVisited = true;\n    unvisitedNodes.push(grid[y - 1][x]);\n  }\n}\n","import React, { Component } from \"react\";\nimport Node, { nodeType, weightType } from \"./Node\";\nimport { dijkstra, dijkstraPath } from \"../algorithms/dijkstra\";\nimport { astar } from \"../algorithms/astar\";\nimport { dfs } from \"../algorithms/dfs\";\nimport { bfs } from \"../algorithms/bfs\";\n\nimport \"./Node.css\";\n\nconst DEFAULT_START_X = 14;\nconst DEFAULT_START_Y = 12;\nconst DEFAULT_END_X = 36;\nconst DEFAULT_END_Y = 12;\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    let weight =\n      this.props.weightname === \"Weight 3\"\n        ? weightType.WEIGHT_THREE\n        : this.props.weightname === \"Weight 5\"\n        ? weightType.WEIGHT_FIVE\n        : this.props.weightname === \"Weight 8\"\n        ? weightType.WEIGHT_EIGHT\n        : weightType.DEFAULT;\n\n    this.state = { weight: weight };\n    this.grid = this.constructInitGrid();\n    this.startNode = this.grid[DEFAULT_START_Y][DEFAULT_START_X];\n    this.endNode = this.grid[DEFAULT_END_Y][DEFAULT_END_X];\n    this.isMousePressed = false;\n    this.algorithm = null;\n    this.clickedNode = null;\n    this.modfiedNodes = [];\n  }\n\n  componentDidMount() {\n    this.props.onRef(this);\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  changeWeightType(weightname) {\n    let weight =\n      weightname === \"Weight 3\"\n        ? weightType.WEIGHT_THREE\n        : weightname === \"Weight 5\"\n        ? weightType.WEIGHT_FIVE\n        : weightname === \"Weight 8\"\n        ? weightType.WEIGHT_EIGHT\n        : weightType.DEFAULT;\n    this.setState({ weight });\n  }\n\n  resetGrid() {\n    let rows = this.props.rows;\n    let cols = this.props.cols;\n    this.algorithm = null;\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (\n          this.grid[i][j].type !== nodeType.START &&\n          this.grid[i][j].type !== nodeType.END\n        ) {\n          this.grid[i][j].type = nodeType.DEFAULT;\n          this.grid[i][j].weight = 1;\n          this[`node-${i}-${j}`].setNode(nodeType.DEFAULT);\n          this[`node-${i}-${j}`].setWeightType(weightType.DEFAULT);\n        }\n      }\n    }\n  }\n\n  resetGridforVisualize() {\n    let rows = this.props.rows;\n    let cols = this.props.cols;\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        this.grid[i][j].prevNode = null;\n        this.grid[i][j].distance = Infinity;\n        this.grid[i][j].isVisited = false;\n        if (\n          this.grid[i][j].type === nodeType.VISITED ||\n          this.grid[i][j].type === nodeType.PATH\n        ) {\n          this.grid[i][j].type = nodeType.DEFAULT;\n          this[`node-${i}-${j}`].setNode(nodeType.DEFAULT);\n        }\n      }\n    }\n  }\n\n  visualize(algorithm, speed) {\n    // reset the internal of the grid\n    // and clear previous visualization\n    this.resetGridforVisualize();\n    this.algorithm = algorithm;\n    const [visitedNodes, nodesInPath] = this.calculateVisualizedNodes(\n      algorithm\n    );\n    this.animateNodes(visitedNodes, nodesInPath, speed);\n  }\n\n  adaptAlgorithm() {\n    this.resetGridforVisualize();\n    const [visitedNodes, nodesInPath] = this.calculateVisualizedNodes(\n      this.props.algorithm\n    );\n\n    for (let i = 0; i < visitedNodes.length + nodesInPath.length; i++) {\n      let node;\n      if (i < visitedNodes.length) {\n        node = visitedNodes[i];\n        node.type = nodeType.VISITED;\n        this[`node-${node.y}-${node.x}`].setNode(nodeType.VISITED_NOANIMATION);\n      } else {\n        node = nodesInPath[i - visitedNodes.length];\n        node.type = nodeType.PATH;\n        this[`node-${node.y}-${node.x}`].setNode(nodeType.PATH_NOANIMATION);\n      }\n    }\n  }\n\n  calculateVisualizedNodes(algorithm) {\n    let visitedNodes, nodesInPath, find;\n    switch (algorithm) {\n      case \"Dijkstra\":\n        visitedNodes = dijkstra(this.grid, this.startNode, this.endNode);\n        nodesInPath = dijkstraPath(this.startNode, this.endNode);\n        break;\n      case \"A* Search\":\n        break;\n      case \"Depth First Search\":\n        [visitedNodes, find] = dfs(this.grid, this.startNode, this.endNode);\n        nodesInPath = find ? visitedNodes : [];\n        break;\n      case \"Breadth First Search\":\n        [visitedNodes, find] = bfs(this.grid, this.startNode, this.endNode);\n        nodesInPath = find ? visitedNodes : [];\n        break;\n      default:\n        visitedNodes = dijkstra(this.grid, this.startNode, this.endNode);\n        nodesInPath = dijkstraPath(this.startNode, this.endNode);\n        break;\n    }\n    return [visitedNodes, nodesInPath];\n  }\n\n  animateNodes(visitedNodes, nodesInPath, speed) {\n    for (let i = 0; i <= visitedNodes.length; i++) {\n      if (i === visitedNodes.length) {\n        setTimeout(() => {\n          for (let j = 0; j < nodesInPath.length; j++) {\n            setTimeout(() => {\n              const node = nodesInPath[j];\n              node.type = nodeType.PATH;\n              this[`node-${node.y}-${node.x}`].setNode(nodeType.PATH);\n            }, 10 + 2 * speed * j);\n          }\n        }, 10 + speed * i);\n      } else {\n        setTimeout(() => {\n          const node = visitedNodes[i];\n          node.type = nodeType.VISITED;\n          this[`node-${node.y}-${node.x}`].setNode(nodeType.VISITED);\n        }, 10 + speed * i);\n      }\n    }\n  }\n\n  handleMouseDown = (node, type) => {\n    this.isMousePressed = true;\n\n    // copy the node state\n    this.clickedNode = {\n      ...node\n    };\n\n    let { weight } = this.state;\n    if (weight === weightType.DEFAULT) {\n      this.grid[node.y][node.x].type = type;\n    } else {\n      let w =\n        weight === weightType.WEIGHT_THREE\n          ? 3\n          : weight === weightType.WEIGHT_FIVE\n          ? 5\n          : weight === weightType.WEIGHT_EIGHT\n          ? 8\n          : 1;\n      this.grid[node.y][node.x].weight = w;\n    }\n\n    // can only modify the node once (for non-start, non-end nodes)\n    if (\n      this.clickedNode.type !== nodeType.START &&\n      this.clickedNode.type !== nodeType.END\n    ) {\n      node.canModify = false;\n      this.modfiedNodes.push(node);\n    }\n  };\n\n  toggleWall(node) {\n    let new_type = node.type;\n    if (\n      node.type === nodeType.DEFAULT ||\n      node.type === nodeType.VISITED ||\n      node.type === nodeType.VISITED_NOANIMATION ||\n      node.type === nodeType.PATH ||\n      node.type === nodeType.PATH_NOANIMATION\n    ) {\n      new_type = nodeType.WALL;\n      this.grid[node.y][node.x].weight = Infinity;\n      this[`node-${node.y}-${node.x}`].setWeightType(weightType.DEFAULT);\n    } else if (\n      node.type === nodeType.WALL ||\n      node.type === nodeType.WEIGHT_THREE ||\n      node.type === nodeType.WEIGHT_FIVE ||\n      node.type === nodeType.WEIGHT_EIGHT\n    ) {\n      new_type = nodeType.DEFAULT;\n    }\n\n    this[`node-${node.y}-${node.x}`].setNode(new_type);\n    this.grid[node.y][node.x].type = new_type;\n  }\n\n  toggleWeight(node) {\n    if (\n      node.type !== nodeType.START &&\n      node.type !== nodeType.END &&\n      node.type !== nodeType.WALL\n    ) {\n      let new_weight;\n      if (node.weight === weightType.DEFAULT) {\n        new_weight = this.state.weight;\n      } else {\n        new_weight = weightType.DEFAULT;\n      }\n\n      let w =\n        new_weight === weightType.WEIGHT_THREE\n          ? 3\n          : new_weight === weightType.WEIGHT_FIVE\n          ? 5\n          : new_weight === weightType.WEIGHT_EIGHT\n          ? 8\n          : 1;\n\n      this.grid[node.y][node.x].weight = w;\n      this[`node-${node.y}-${node.x}`].setWeightType(new_weight);\n    }\n  }\n\n  moveStartorEndNode(node) {\n    if (\n      node.type !== nodeType.WALL &&\n      node.type !== nodeType.START &&\n      node.type !== nodeType.END\n    ) {\n      const prevX = this.clickedNode.x;\n      const prevY = this.clickedNode.y;\n      const { x, y } = node;\n      this[`node-${prevY}-${prevX}`].setNode(nodeType.DEFAULT);\n      this.grid[prevY][prevX].type = nodeType.DEFAULT;\n      this[`node-${y}-${x}`].setNode(this.clickedNode.type);\n      this.grid[y][x].type = this.clickedNode.type;\n      if (this.grid[y][x].type === nodeType.START) {\n        this.startNode = this.grid[y][x];\n      } else {\n        this.endNode = this.grid[y][x];\n      }\n      this.clickedNode.x = x;\n      this.clickedNode.y = y;\n\n      if (this.algorithm) {\n        this.adaptAlgorithm();\n      }\n    }\n  }\n\n  handleMouseEnter = node => {\n    // can only modify the node once\n    if (!this.isMousePressed || !node.canModify) return;\n    const { weight } = this.state;\n    if (\n      this.clickedNode.type !== nodeType.START &&\n      this.clickedNode.type !== nodeType.END\n    ) {\n      if (weight === weightType.DEFAULT) {\n        this.toggleWall(node);\n      } else {\n        this.toggleWeight(node);\n      }\n\n      // set the flag so that the node cannot be modified\n      node.canModify = false;\n      this.modfiedNodes.push(node);\n    } else {\n      this.moveStartorEndNode(node);\n    }\n  };\n\n  handleMouseUp = () => {\n    this.isMousePressed = false;\n    this.clickedNode = null;\n\n    // reset all the modified nodes to can-modifiy\n    for (let i = 0; i < this.modfiedNodes.length; i++) {\n      const node = this.modfiedNodes[i];\n      this[`node-${node.y}-${node.x}`].setState({ canModify: true });\n    }\n    this.modfiedNodes = [];\n  };\n\n  constructInitGrid() {\n    let rows = this.props.rows;\n    let cols = this.props.cols;\n    let grid = [];\n\n    for (let i = 0; i < rows; i++) {\n      let row = [];\n      for (let j = 0; j < cols; j++) {\n        const type =\n          j === DEFAULT_START_X && i === DEFAULT_START_Y\n            ? nodeType.START\n            : j === DEFAULT_END_X && i === DEFAULT_END_Y\n            ? nodeType.END\n            : nodeType.DEFAULT;\n        let node = {\n          x: j,\n          y: i,\n          type: type,\n          isVisited: false,\n          distance: Infinity,\n          weight: 1,\n          prevNode: null\n        };\n        row.push(node);\n      }\n      grid.push(row);\n    }\n    return grid;\n  }\n\n  render() {\n    let { weight } = this.state;\n\n    return (\n      <div className=\"grid\">\n        {this.grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx} id=\"row\">\n              {row.map((node, nodeIdx) => {\n                return (\n                  <Node\n                    key={nodeIdx}\n                    id={`node-${rowIdx}-${nodeIdx}`}\n                    node={node}\n                    onMouseDown={this.handleMouseDown}\n                    onMouseEnter={this.handleMouseEnter}\n                    onMouseUp={this.handleMouseUp}\n                    weight={weight}\n                    onRef={ref => (this[`node-${rowIdx}-${nodeIdx}`] = ref)}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n","import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Dropdown } from \"react-bootstrap\";\nimport \"./Navbar.css\";\n\nclass Navitem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: props.name, type: props.type };\n  }\n\n  render() {\n    const { type } = this.state;\n    if (type === \"button\") {\n      return (\n        <li>\n          <Button id=\"button\" onClick={() => this.props.onClick()}>\n            {this.state.name}\n          </Button>\n        </li>\n      );\n    } else {\n      return (\n        <li>\n          <Dropdown>\n            <Dropdown.Toggle id=\"dropdown-toggle\">\n              {this.state.name + \" : \" + this.props.curItem + \"  \"}\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              {this.props.itemList.map(item => {\n                return (\n                  <Dropdown.Item\n                    key={item}\n                    onSelect={() => this.props.onChangeItem(item)}\n                    id=\"dropdown-item\"\n                  >\n                    {item}\n                  </Dropdown.Item>\n                );\n              })}\n            </Dropdown.Menu>\n          </Dropdown>\n        </li>\n      );\n    }\n  }\n}\n\nexport default Navitem;\n","import React, { Component } from \"react\";\nimport Grid from \"./Grid\";\nimport { Navbar } from \"react-bootstrap\";\nimport { Nav } from \"react-bootstrap\";\nimport Navitem from \"./Navitem\";\nimport \"./Navbar.css\";\n\nconst algorithms = [\n  \"Dijkstra\",\n  \"A* Search\",\n  \"Depth First Search\",\n  \"Breadth First Search\"\n];\n\nconst weights = [\"Wall\", \"Weight 3\", \"Weight 5\", \"Weight 8\"];\n\nconst speeds = [\"Fast\", \"Medium\", \"Slow\"];\n\nclass PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      curAlgorithm: \"Dijkstra\",\n      curSpeed: \"Fast\",\n      curWeight: \"Wall\"\n    };\n  }\n\n  handleChangeAlgorithm = algorithm => {\n    this.setState({ curAlgorithm: algorithm });\n  };\n\n  handleChangeSpeed = speedName => {\n    this.setState({ curSpeed: speedName });\n  };\n\n  handleChangeWeight = weightname => {\n    this.setState({ curWeight: weightname });\n    this.grid.changeWeightType(weightname);\n  };\n\n  handleReset = () => {\n    this.grid.resetGrid();\n  };\n\n  handleVisualize = () => {\n    let speed = 12;\n    switch (this.state.curSpeed) {\n      case \"Fast\":\n        speed = 12;\n        break;\n      case \"Medium\":\n        speed = 16;\n        break;\n      case \"Slow\":\n        speed = 20;\n        break;\n      default:\n        speed = 12;\n        break;\n    }\n    this.grid.visualize(this.state.curAlgorithm, speed);\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar variant=\"custom\">\n          <Navbar.Brand href=\"#home\">Pathfinding Visualizer</Navbar.Brand>\n          <Nav>\n            <Navitem\n              name={\"Visualize\"}\n              type={\"button\"}\n              onClick={this.handleVisualize}\n            />\n            <Navitem\n              name={\"Reset Board\"}\n              type={\"button\"}\n              onClick={this.handleReset}\n            />\n            <Navitem\n              name={\"Add Node\"}\n              type={\"dropdown\"}\n              itemList={weights}\n              curItem={this.state.curWeight}\n              onChangeItem={this.handleChangeWeight}\n            />\n            <Navitem\n              name={\"Algorithms\"}\n              type={\"dropdown\"}\n              itemList={algorithms}\n              curItem={this.state.curAlgorithm}\n              onChangeItem={this.handleChangeAlgorithm}\n            />\n            <Navitem\n              name={\"Speed\"}\n              type={\"dropdown\"}\n              itemList={speeds}\n              curItem={this.state.curSpeed}\n              onChangeItem={this.handleChangeSpeed}\n            />\n          </Nav>\n        </Navbar>\n        <Grid\n          rows={24}\n          cols={54}\n          algorithm={this.state.curAlgorithm}\n          weightname={this.state.curWeight}\n          onRef={ref => (this.grid = ref)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default PathfindingVisualizer;\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./components/PathfindingVisualizer\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"typeface-roboto\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}