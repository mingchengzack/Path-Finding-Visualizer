{"version":3,"sources":["components/Navitem.jsx","components/Navbar.jsx","components/Node.jsx","components/Grid.jsx","components/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Navitem","props","state","name","className","href","this","Component","Navbar","Node","Grid","grid","rows","cols","i","row","j","push","setState","map","rowIdx","key","node","nodeIdx","PathfindingVisualizer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4UAmBeA,E,YAhBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,KAAMF,EAAME,MAFV,E,sEAMjB,OACE,wBAAIC,UAAU,mBACZ,uBAAGA,UAAU,WAAWC,KAAK,KAC1BC,KAAKJ,MAAMC,W,GAVAI,aCmBPC,G,uLAfX,OACE,yBAAKJ,UAAU,kDACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,0BAGA,wBAAID,UAAU,cACZ,kBAAC,EAAD,CAASD,KAAM,eACf,kBAAC,EAAD,CAASA,KAAM,cACf,kBAAC,EAAD,CAASA,KAAM,sB,GAVJI,cCSNE,G,iBATb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,GAFI,E,sEAKjB,OAAO,yBAAKE,UAAU,a,GANPG,cC0CJG,E,YAvCb,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAES,KAAM,IAFJ,E,iFAUjB,IAJA,IAAMC,EAAON,KAAKL,MAAMW,KAClBC,EAAOP,KAAKL,MAAMY,KAClBF,EAAO,GAEJG,EAAI,EAAGA,EAAIF,EAAME,IAAK,CAE7B,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAIH,EAAMG,IACxBD,EAAIE,KAAK,IAEXN,EAAKM,KAAKF,GAEZT,KAAKY,SAAS,CAAEP,W,+BAGR,IACAA,EAASL,KAAKJ,MAAdS,KAER,OACE,yBAAKP,UAAU,QACZO,EAAKQ,KAAI,SAACJ,EAAKK,GACd,OACE,yBAAKC,IAAKD,GACPL,EAAII,KAAI,SAACG,EAAMC,GACd,OAAO,kBAAC,EAAD,CAAMF,IAAKE,GAAX,iB,GA9BJhB,aCWJiB,E,iLATX,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMZ,KAAM,GAAIC,KAAM,U,GALMN,a,MCQrBkB,MARf,WACE,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,QCIcsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.169d43a6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Navitem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: props.name };\n  }\n\n  render() {\n    return (\n      <li className=\"nav-item active\">\n        <a className=\"nav-link\" href=\"#\">\n          {this.state.name}\n        </a>\n      </li>\n    );\n  }\n}\n\nexport default Navitem;\n","import React, { Component } from \"react\";\nimport Navitem from \"./Navitem\";\nimport \"./Navbar.css\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark navbar-expand-lg bg-primary\">\n        <a className=\"navbar-brand\" href=\"#\">\n          Pathfinding Visualizer\n        </a>\n        <ul className=\"navbar-nav\">\n          <Navitem name={\"Algorithms\"} />\n          <Navitem name={\"Visualize\"} />\n          <Navitem name={\"Clear Board\"} />\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return <div className=\"node\"></div>;\n  }\n}\n\nexport default Node;\n","import React, { Component } from \"react\";\nimport Node from \"./Node\";\n\nimport \"./Node.css\";\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { grid: [] };\n  }\n\n  componentDidMount() {\n    const rows = this.props.rows;\n    const cols = this.props.cols;\n    const grid = [];\n\n    for (let i = 0; i < rows; i++) {\n      let row = [];\n      for (let j = 0; j < cols; j++) {\n        row.push([]);\n      }\n      grid.push(row);\n    }\n    this.setState({ grid });\n  }\n\n  render() {\n    const { grid } = this.state;\n\n    return (\n      <div className=\"grid\">\n        {grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx}>\n              {row.map((node, nodeIdx) => {\n                return <Node key={nodeIdx}> </Node>;\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n","import React, { Component } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Grid from \"./Grid\";\nimport Node from \"./Node\";\n\nclass PathfindingVisualizer extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Grid rows={20} cols={50} />\n      </div>\n    );\n  }\n}\n\nexport default PathfindingVisualizer;\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./components/PathfindingVisualizer\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}