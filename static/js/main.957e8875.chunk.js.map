{"version":3,"sources":["components/Node.jsx","algorithms/dijkstra.js","components/Grid.jsx","components/Navitem.jsx","components/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","preventDragHandler","e","preventDefault","handleChangeNode","type","new_type","state","nodeType","START","END","DEFAULT","setState","onMouseDown","setNode","x","node","y","this","onRef","undefined","typename","WALL","VISITED","PATH","className","onMouseEnter","onMouseUp","onDragStart","Component","updateUnvisitedNeighbors","grid","neighbors","push","length","unvisitedNeighbors","filter","neighbor","isVisited","distance","prevNode","DEFAULT_START_X","DEFAULT_START_Y","DEFAULT_END_X","DEFAULT_END_Y","Grid","handleMouseDown","isMousePressed","clickedNode","handleMouseEnter","prevX","prevY","startNode","endNode","handleMouseUp","constructInitGrid","rows","cols","i","j","Infinity","algorithm","speed","resetGridforVisualize","visualizeDijkstra","visitedNodes","unvisitedNodes","row","sort","nodeA","nodeB","closestNode","shift","dijkstra","nodesInShortestPath","currNode","unshift","getNodesInShortestPath","animateDijkstra","setTimeout","animateShortestPath","map","rowIdx","key","id","nodeIdx","ref","Navitem","name","Button","variant","onClick","Dropdown","Toggle","curItem","Menu","itemList","item","Item","onSelect","onChangeItem","algorithms","speeds","PathfindingVisualizer","handleChangeAlgorithm","curAlgorithm","handleChangeSpeed","speedName","curSpeed","handleReset","resetGrid","handleVisualize","visualize","Navbar","bg","Brand","href","Nav","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.957e8875.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { x: props.node.x, y: props.node.y, type: props.node.type };\n  }\n\n  componentDidMount() {\n    this.props.onRef(this);\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  preventDragHandler = e => {\n    e.preventDefault();\n  };\n\n  handleChangeNode = type => {\n    let new_type = this.state.type;\n    if (\n      this.state.type !== nodeType.START &&\n      this.state.type !== nodeType.END\n    ) {\n      new_type = type;\n    } else if (this.state.type === type) {\n      new_type = nodeType.DEFAULT;\n    }\n    this.setState({ type: new_type });\n    this.props.onMouseDown(this.state, new_type);\n  };\n\n  setNode = type => {\n    this.setState({ type });\n  };\n\n  render() {\n    let { type } = this.state;\n    let typename =\n      type === nodeType.START\n        ? \"node-start\"\n        : type === nodeType.END\n        ? \"node-end\"\n        : type === nodeType.WALL\n        ? \"node-wall\"\n        : type === nodeType.VISITED\n        ? \"node-visited\"\n        : type === nodeType.PATH\n        ? \"node-path\"\n        : \"\";\n    return (\n      <div\n        className={`node ${typename}`}\n        onMouseDown={() => this.handleChangeNode(nodeType.WALL)}\n        onMouseEnter={() => this.props.onMouseEnter(this.state, nodeType.WALL)}\n        onMouseUp={() => this.props.onMouseUp()}\n        onDragStart={this.preventDragHandler}\n      ></div>\n    );\n  }\n}\n\nexport default Node;\nexport const nodeType = {\n  DEFAULT: 1,\n  START: 2,\n  END: 3,\n  WALL: 4,\n  VISITED: 5,\n  PATH: 6\n};\n","import { nodeType } from \"../components/Node\";\n\n// performs Dijkstra's algorithm\nexport function dijkstra(grid, startNode, endNode) {\n  const visitedNodes = [];\n  let unvisitedNodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      unvisitedNodes.push(node);\n    }\n  }\n  startNode.distance = 0;\n  while (unvisitedNodes.length !== 0) {\n    // sort the nodes by distance\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n    const closestNode = unvisitedNodes.shift();\n\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodes;\n\n    closestNode.isVisited = true;\n    if (closestNode === endNode) return visitedNodes;\n    if (closestNode !== startNode) {\n      closestNode.type = nodeType.VISITED;\n      visitedNodes.push(closestNode);\n    }\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n  return visitedNodes;\n}\n\n// backtracks from the endNode to find the shortest path\nexport function getNodesInShortestPath(startNode, endNode) {\n  const nodesInShortestPath = [];\n  let currNode = endNode.prevNode;\n  while (currNode !== null && currNode !== startNode) {\n    nodesInShortestPath.unshift(currNode);\n    currNode.type = nodeType.PATH;\n    currNode = currNode.prevNode;\n  }\n  return nodesInShortestPath;\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  let neighbors = [];\n  const { x, y } = node;\n  if (y > 0) neighbors.push(grid[y - 1][x]);\n  if (y < grid.length - 1) neighbors.push(grid[y + 1][x]);\n  if (x > 0) neighbors.push(grid[y][x - 1]);\n  if (x < grid[0].length - 1) neighbors.push(grid[y][x + 1]);\n  const unvisitedNeighbors = neighbors.filter(\n    neighbor => !neighbor.isVisited && neighbor.type !== nodeType.WALL\n  );\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.prevNode = node;\n  }\n}\n","import React, { Component } from \"react\";\nimport Node, { nodeType } from \"./Node\";\nimport { dijkstra, getNodesInShortestPath } from \"../algorithms/dijkstra\";\n\nimport \"./Node.css\";\n\nconst DEFAULT_START_X = 8;\nconst DEFAULT_START_Y = 12;\nconst DEFAULT_END_X = 42;\nconst DEFAULT_END_Y = 12;\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.grid = this.constructInitGrid();\n    this.startNode = this.grid[DEFAULT_START_Y][DEFAULT_START_X];\n    this.endNode = this.grid[DEFAULT_END_Y][DEFAULT_END_X];\n    this.isMousePressed = false;\n    this.clickedNode = null;\n  }\n\n  componentDidMount() {\n    this.props.onRef(this);\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  resetGrid() {\n    let rows = this.props.rows;\n    let cols = this.props.cols;\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        const type =\n          j === DEFAULT_START_X && i === DEFAULT_START_Y\n            ? nodeType.START\n            : j === DEFAULT_END_X && i === DEFAULT_END_Y\n            ? nodeType.END\n            : nodeType.DEFAULT;\n        let node = {\n          x: j,\n          y: i,\n          type: type,\n          isVisited: false,\n          distance: Infinity,\n          prevNode: null\n        };\n        this.grid[i][j] = node;\n        this[`node-${i}-${j}`].setNode(type);\n      }\n    }\n    this.startNode = this.grid[DEFAULT_START_Y][DEFAULT_START_X];\n    this.endNode = this.grid[DEFAULT_END_Y][DEFAULT_END_X];\n  }\n\n  resetGridforVisualize() {\n    let rows = this.props.rows;\n    let cols = this.props.cols;\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        this.grid[i][j].prevNode = null;\n        this.grid[i][j].distance = Infinity;\n        this.grid[i][j].isVisited = false;\n        if (\n          this.grid[i][j].type === nodeType.VISITED ||\n          this.grid[i][j].type === nodeType.PATH\n        ) {\n          this[`node-${i}-${j}`].setNode(nodeType.DEFAULT);\n        }\n      }\n    }\n  }\n\n  visualize(algorithm, speed) {\n    // reset the internal of the grid\n    // and clear previous visualization\n    this.resetGridforVisualize();\n    switch (algorithm) {\n      case \"Dijkstra\":\n        this.visualizeDijkstra(speed);\n        break;\n      default:\n        this.visualizeDijkstra(speed);\n        break;\n    }\n  }\n\n  visualizeDijkstra(speed) {\n    const visitedNodes = dijkstra(this.grid, this.startNode, this.endNode);\n    const nodesInShortestPath = getNodesInShortestPath(\n      this.startNode,\n      this.endNode\n    );\n    this.animateDijkstra(visitedNodes, nodesInShortestPath, speed);\n  }\n\n  animateDijkstra(visitedNodes, nodesInShortestPath, speed) {\n    for (let i = 0; i <= visitedNodes.length; i++) {\n      if (i === visitedNodes.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPath);\n        }, speed * i);\n      } else {\n        setTimeout(() => {\n          const node = visitedNodes[i];\n          this[`node-${node.y}-${node.x}`].setNode(nodeType.VISITED);\n        }, speed * i);\n      }\n    }\n  }\n\n  animateShortestPath(nodesInShortestPath) {\n    for (let i = 0; i < nodesInShortestPath.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPath[i];\n        this[`node-${node.y}-${node.x}`].setNode(nodeType.PATH);\n      }, 50 * i);\n    }\n  }\n\n  handleMouseDown = (node, type) => {\n    this.isMousePressed = true;\n    this.clickedNode = node;\n    this.grid[node.y][node.x].type = type;\n  };\n\n  handleMouseEnter = (node, type) => {\n    if (!this.isMousePressed) return;\n    if (\n      this.clickedNode.type !== nodeType.START &&\n      this.clickedNode.type !== nodeType.END\n    ) {\n      let new_type = node.type;\n      if (node.type !== nodeType.START && node.type !== nodeType.END) {\n        new_type = type;\n      } else if (node.type === type) {\n        new_type = nodeType.DEFAULT;\n      }\n      this[`node-${node.y}-${node.x}`].setNode(new_type);\n      this.grid[node.y][node.x].type = new_type;\n    } else {\n      if (node.type === nodeType.DEFAULT) {\n        const prevX = this.clickedNode.x;\n        const prevY = this.clickedNode.y;\n        const { x, y } = node;\n        this[`node-${prevY}-${prevX}`].setNode(nodeType.DEFAULT);\n        this.grid[prevY][prevX].type = nodeType.DEFAULT;\n        this[`node-${y}-${x}`].setNode(this.clickedNode.type);\n        this.grid[y][x].type = this.clickedNode.type;\n        if (this.grid[y][x].type === nodeType.START) {\n          this.startNode = this.grid[y][x];\n        } else {\n          this.endNode = this.grid[y][x];\n        }\n        this.clickedNode.x = x;\n        this.clickedNode.y = y;\n      }\n    }\n  };\n\n  handleMouseUp = () => {\n    this.isMousePressed = false;\n    this.clickedNode = null;\n  };\n\n  constructInitGrid() {\n    let rows = this.props.rows;\n    let cols = this.props.cols;\n    let grid = [];\n\n    for (let i = 0; i < rows; i++) {\n      let row = [];\n      for (let j = 0; j < cols; j++) {\n        const type =\n          j === DEFAULT_START_X && i === DEFAULT_START_Y\n            ? nodeType.START\n            : j === DEFAULT_END_X && i === DEFAULT_END_Y\n            ? nodeType.END\n            : nodeType.DEFAULT;\n        let node = {\n          x: j,\n          y: i,\n          type: type,\n          isVisited: false,\n          distance: Infinity,\n          prevNode: null\n        };\n        row.push(node);\n      }\n      grid.push(row);\n    }\n    return grid;\n  }\n\n  render() {\n    return (\n      <div className=\"grid\">\n        {this.grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx} id=\"row\">\n              {row.map((node, nodeIdx) => {\n                return (\n                  <Node\n                    key={nodeIdx}\n                    id={`node-${rowIdx}-${nodeIdx}`}\n                    node={node}\n                    onMouseDown={this.handleMouseDown}\n                    onMouseEnter={this.handleMouseEnter}\n                    onMouseUp={this.handleMouseUp}\n                    onRef={ref => (this[`node-${rowIdx}-${nodeIdx}`] = ref)}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n","import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Dropdown } from \"react-bootstrap\";\n\nclass Navitem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: props.name, type: props.type };\n  }\n\n  render() {\n    const { type } = this.state;\n    if (type === \"button\") {\n      return (\n        <li>\n          <Button variant=\"success\" onClick={() => this.props.onClick()}>\n            {this.state.name}\n          </Button>\n        </li>\n      );\n    } else {\n      return (\n        <li>\n          <Dropdown>\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n              {this.state.name + \" : \" + this.props.curItem}\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              {this.props.itemList.map(item => {\n                return (\n                  <Dropdown.Item\n                    key={item}\n                    onSelect={() => this.props.onChangeItem(item)}\n                  >\n                    {item}\n                  </Dropdown.Item>\n                );\n              })}\n            </Dropdown.Menu>\n          </Dropdown>\n        </li>\n      );\n    }\n  }\n}\n\nexport default Navitem;\n","import React, { Component } from \"react\";\nimport Grid from \"./Grid\";\nimport { Navbar } from \"react-bootstrap\";\nimport { Nav } from \"react-bootstrap\";\nimport Navitem from \"./Navitem\";\nimport \"./Navbar.css\";\n\nconst algorithms = [\n  \"Dijkstra\",\n  \"A*\",\n  \"Depth First Search\",\n  \"Breadth First Search\"\n];\n\nconst speeds = [\"Fast\", \"Medium\", \"Slow\"];\n\nclass PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = { curAlgorithm: \"Dijkstra\", curSpeed: \"Fast\" };\n  }\n\n  handleChangeAlgorithm = algorithm => {\n    this.setState({ curAlgorithm: algorithm });\n  };\n\n  handleChangeSpeed = speedName => {\n    this.setState({ curSpeed: speedName });\n  };\n\n  handleReset = () => {\n    this.grid.resetGrid();\n  };\n\n  handleVisualize = () => {\n    let speed = 3;\n    switch (this.state.curSpeed) {\n      case \"Fast\":\n        speed = 3;\n        break;\n      case \"Medium\":\n        speed = 7;\n        break;\n      case \"Slow\":\n        speed = 11;\n        break;\n      default:\n        speed = 3;\n        break;\n    }\n    this.grid.visualize(this.state.curAlgorithm, speed);\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar bg=\"primary\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">Pathfinding Visualizer</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Navitem\n              name={\"Visualize\"}\n              type={\"button\"}\n              onClick={this.handleVisualize}\n            />\n            <Navitem\n              name={\"Reset Board\"}\n              type={\"button\"}\n              onClick={this.handleReset}\n            />\n            <Navitem\n              name={\"Speed\"}\n              type={\"dropdown\"}\n              itemList={speeds}\n              curItem={this.state.curSpeed}\n              onChangeItem={this.handleChangeSpeed}\n            />\n            <Navitem\n              name={\"Algorithms\"}\n              type={\"dropdown\"}\n              itemList={algorithms}\n              curItem={this.state.curAlgorithm}\n              onChangeItem={this.handleChangeAlgorithm}\n            />\n          </Nav>\n        </Navbar>\n        <Grid rows={24} cols={54} onRef={ref => (this.grid = ref)} />\n      </div>\n    );\n  }\n}\n\nexport default PathfindingVisualizer;\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./components/PathfindingVisualizer\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}