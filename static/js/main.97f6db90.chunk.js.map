{"version":3,"sources":["components/Node.jsx","algorithms/dijkstra.js","algorithms/dfs.js","algorithms/bfs.js","components/Grid.jsx","components/Navitem.jsx","components/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","preventDragHandler","e","preventDefault","handleChangeNode","type","new_type","state","nodeType","DEFAULT","VISITED","VISITED_NOANIMATION","PATH","PATH_NOANIMATION","setState","onMouseDown","setNode","x","node","y","canModify","this","onRef","undefined","typename","START","END","WALL","className","onMouseEnter","onMouseUp","onDragStart","Component","dijkstra","grid","startNode","endNode","visitedNodes","unvisitedNodes","row","push","distance","length","sort","nodeA","nodeB","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","dijkstraPath","nodesInShortestPath","currNode","prevNode","unshift","neighbors","unvisitedNeighbors","filter","neighbor","DEFAULT_START_X","DEFAULT_START_Y","DEFAULT_END_X","DEFAULT_END_Y","Grid","handleMouseDown","isMousePressed","clickedNode","modfiedNodes","handleMouseEnter","prevX","prevY","algorithm","adaptAlgorithm","handleMouseUp","i","constructInitGrid","rows","cols","j","speed","resetGridforVisualize","calculateVisualizedNodes","nodesInPath","animateNodes","curNode","dfs","bfs","setTimeout","map","rowIdx","key","id","nodeIdx","ref","Navitem","name","Button","onClick","Dropdown","Toggle","curItem","Menu","itemList","item","Item","onSelect","onChangeItem","algorithms","speeds","PathfindingVisualizer","handleChangeAlgorithm","curAlgorithm","handleChangeSpeed","speedName","curSpeed","handleReset","resetGrid","handleVisualize","visualize","Navbar","variant","Brand","href","Nav","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97f6db90.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nclass Node extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      x: props.node.x,\n      y: props.node.y,\n      type: props.node.type,\n      canModify: true\n    };\n  }\n\n  componentDidMount() {\n    this.props.onRef(this);\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  preventDragHandler = e => {\n    e.preventDefault();\n  };\n\n  handleChangeNode = type => {\n    let new_type = this.state.type;\n    if (\n      this.state.type === nodeType.DEFAULT ||\n      this.state.type === nodeType.VISITED ||\n      this.state.type === nodeType.VISITED_NOANIMATION ||\n      this.state.type === nodeType.PATH ||\n      this.state.type === nodeType.PATH_NOANIMATION\n    ) {\n      new_type = type;\n    } else if (this.state.type === type) {\n      new_type = nodeType.DEFAULT;\n    }\n    this.setState({ type: new_type });\n    this.props.onMouseDown(this.state, new_type);\n  };\n\n  setNode = type => {\n    this.setState({ type });\n  };\n\n  render() {\n    let { type } = this.state;\n    let typename =\n      type === nodeType.START\n        ? \"node-start\"\n        : type === nodeType.END\n        ? \"node-end\"\n        : type === nodeType.WALL\n        ? \"node-wall\"\n        : type === nodeType.VISITED\n        ? \"node-visited\"\n        : type === nodeType.PATH\n        ? \"node-path\"\n        : type === nodeType.VISITED_NOANIMATION\n        ? \"node-visited-nonanimated\"\n        : type === nodeType.PATH_NOANIMATION\n        ? \"node-path-nonanimated\"\n        : \"\";\n    return (\n      <div\n        className={`node ${typename}`}\n        onMouseDown={() => this.handleChangeNode(nodeType.WALL)}\n        onMouseEnter={() => this.props.onMouseEnter(this.state, nodeType.WALL)}\n        onMouseUp={() => this.props.onMouseUp()}\n        onDragStart={this.preventDragHandler}\n      ></div>\n    );\n  }\n}\n\nexport default Node;\nexport const nodeType = {\n  DEFAULT: 1,\n  START: 2,\n  END: 3,\n  WALL: 4,\n  VISITED: 5,\n  PATH: 6,\n  VISITED_NOANIMATION: 7,\n  PATH_NOANIMATION: 8\n};\n","import { nodeType } from \"../components/Node\";\n\n// performs Dijkstra's algorithm\nexport function dijkstra(grid, startNode, endNode) {\n  let visitedNodes = [];\n  let unvisitedNodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      unvisitedNodes.push(node);\n    }\n  }\n  startNode.distance = 0;\n  while (unvisitedNodes.length !== 0) {\n    // sort the nodes by distance\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n    const closestNode = unvisitedNodes.shift();\n\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodes;\n\n    closestNode.isVisited = true;\n    if (closestNode === endNode) return visitedNodes;\n    if (closestNode !== startNode) {\n      visitedNodes.push(closestNode);\n    }\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n  return visitedNodes;\n}\n\n// backtracks from the endNode to find the shortest path\nexport function dijkstraPath(startNode, endNode) {\n  const nodesInShortestPath = [];\n  let currNode = endNode.prevNode;\n  while (currNode !== null && currNode !== startNode) {\n    nodesInShortestPath.unshift(currNode);\n    currNode = currNode.prevNode;\n  }\n  return nodesInShortestPath;\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  let neighbors = [];\n  const { x, y } = node;\n  if (y > 0) neighbors.push(grid[y - 1][x]);\n  if (y < grid.length - 1) neighbors.push(grid[y + 1][x]);\n  if (x > 0) neighbors.push(grid[y][x - 1]);\n  if (x < grid[0].length - 1) neighbors.push(grid[y][x + 1]);\n  const unvisitedNeighbors = neighbors.filter(\n    neighbor => !neighbor.isVisited && neighbor.type !== nodeType.WALL\n  );\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.prevNode = node;\n  }\n}\n","import { nodeType } from \"../components/Node\";\n\n// performs depth first search algorithm\nexport function dfs(grid, startNode, endNode) {\n  const visitedNodes = [];\n  let unvisitedNodes = [];\n  unvisitedNodes.push(startNode);\n  while (unvisitedNodes.length !== 0) {\n    // get next cur node\n    const curNode = unvisitedNodes.shift();\n\n    // add neighbors to unvisitedNodes\n    updateUnvisitedNeighbors(curNode, grid, unvisitedNodes);\n    if (!curNode.isVisited) {\n      curNode.isVisited = true;\n      if (curNode === endNode) return visitedNodes;\n      if (curNode !== startNode) {\n        visitedNodes.push(curNode);\n      }\n    }\n  }\n\n  return visitedNodes;\n}\n\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\n  const { x, y } = node;\n  if (\n    x > 0 &&\n    !grid[y][x - 1].isVisited &&\n    grid[y][x - 1].type !== nodeType.WALL\n  )\n    unvisitedNodes.unshift(grid[y][x - 1]);\n  if (\n    y < grid.length - 1 &&\n    !grid[y + 1][x].isVisited &&\n    grid[y + 1][x].type !== nodeType.WALL\n  )\n    unvisitedNodes.unshift(grid[y + 1][x]);\n  if (\n    x < grid[0].length - 1 &&\n    !grid[y][x + 1].isVisited &&\n    grid[y][x + 1].type !== nodeType.WALL\n  )\n    unvisitedNodes.unshift(grid[y][x + 1]);\n  if (\n    y > 0 &&\n    !grid[y - 1][x].isVisited &&\n    grid[y - 1][x].type !== nodeType.WALL\n  )\n    unvisitedNodes.unshift(grid[y - 1][x]);\n}\n","import { nodeType } from \"../components/Node\";\n\n// performs breadth first search algorithm\nexport function bfs(grid, startNode, endNode) {\n  const visitedNodes = [];\n  let unvisitedNodes = [];\n  unvisitedNodes.push(startNode);\n  while (unvisitedNodes.length !== 0) {\n    // get next cur node\n    const curNode = unvisitedNodes.shift();\n    // add neighbors to unvisitedNodes\n    updateUnvisitedNeighbors(curNode, grid, unvisitedNodes);\n    curNode.isVisited = true;\n    if (curNode === endNode) return visitedNodes;\n    if (curNode !== startNode) {\n      visitedNodes.push(curNode);\n    }\n  }\n\n  return visitedNodes;\n}\n\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\n  const { x, y } = node;\n  if (\n    x > 0 &&\n    !grid[y][x - 1].isVisited &&\n    grid[y][x - 1].type !== nodeType.WALL\n  ) {\n    grid[y][x - 1].isVisited = true;\n    unvisitedNodes.push(grid[y][x - 1]);\n  }\n  if (\n    y < grid.length - 1 &&\n    !grid[y + 1][x].isVisited &&\n    grid[y + 1][x].type !== nodeType.WALL\n  ) {\n    grid[y + 1][x].isVisited = true;\n    unvisitedNodes.push(grid[y + 1][x]);\n  }\n  if (\n    x < grid[0].length - 1 &&\n    !grid[y][x + 1].isVisited &&\n    grid[y][x + 1].type !== nodeType.WALL\n  ) {\n    grid[y][x + 1].isVisited = true;\n    unvisitedNodes.push(grid[y][x + 1]);\n  }\n  if (\n    y > 0 &&\n    !grid[y - 1][x].isVisited &&\n    grid[y - 1][x].type !== nodeType.WALL\n  ) {\n    grid[y - 1][x].isVisited = true;\n    unvisitedNodes.push(grid[y - 1][x]);\n  }\n}\n","import React, { Component } from \"react\";\nimport Node, { nodeType } from \"./Node\";\nimport { dijkstra, dijkstraPath } from \"../algorithms/dijkstra\";\nimport { astar } from \"../algorithms/astar\";\nimport { dfs } from \"../algorithms/dfs\";\nimport { bfs } from \"../algorithms/bfs\";\n\nimport \"./Node.css\";\n\nconst DEFAULT_START_X = 14;\nconst DEFAULT_START_Y = 12;\nconst DEFAULT_END_X = 36;\nconst DEFAULT_END_Y = 12;\n\nclass Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.grid = this.constructInitGrid();\n    this.startNode = this.grid[DEFAULT_START_Y][DEFAULT_START_X];\n    this.endNode = this.grid[DEFAULT_END_Y][DEFAULT_END_X];\n    this.isMousePressed = false;\n    this.algorithm = null;\n    this.clickedNode = null;\n    this.modfiedNodes = [];\n  }\n\n  componentDidMount() {\n    this.props.onRef(this);\n  }\n\n  componentWillUnmount() {\n    this.props.onRef(undefined);\n  }\n\n  resetGrid() {\n    let rows = this.props.rows;\n    let cols = this.props.cols;\n    this.algorithm = null;\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        if (\n          this.grid[i][j].type !== nodeType.START &&\n          this.grid[i][j].type !== nodeType.END\n        ) {\n          this.grid[i][j].type = nodeType.DEFAULT;\n          this[`node-${i}-${j}`].setNode(nodeType.DEFAULT);\n        }\n      }\n    }\n  }\n\n  resetGridforVisualize() {\n    let rows = this.props.rows;\n    let cols = this.props.cols;\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        this.grid[i][j].prevNode = null;\n        this.grid[i][j].distance = Infinity;\n        this.grid[i][j].isVisited = false;\n        if (\n          this.grid[i][j].type === nodeType.VISITED ||\n          this.grid[i][j].type === nodeType.PATH\n        ) {\n          this.grid[i][j].type = nodeType.DEFAULT;\n          this[`node-${i}-${j}`].setNode(nodeType.DEFAULT);\n        }\n      }\n    }\n  }\n\n  visualize(algorithm, speed) {\n    // reset the internal of the grid\n    // and clear previous visualization\n    this.resetGridforVisualize();\n    this.algorithm = algorithm;\n    const [visitedNodes, nodesInPath] = this.calculateVisualizedNodes(\n      algorithm\n    );\n    this.animateNodes(visitedNodes, nodesInPath, speed);\n  }\n\n  adaptAlgorithm() {\n    this.resetGridforVisualize();\n    const [visitedNodes, nodesInPath] = this.calculateVisualizedNodes(\n      this.props.algorithm\n    );\n\n    for (let i = 0; i < visitedNodes.length + nodesInPath.length; i++) {\n      let node;\n      if (i < visitedNodes.length) {\n        node = visitedNodes[i];\n        node.type = nodeType.VISITED;\n        this[`node-${node.y}-${node.x}`].setNode(nodeType.VISITED_NOANIMATION);\n      } else {\n        node = nodesInPath[i - visitedNodes.length];\n        node.type = nodeType.PATH;\n        this[`node-${node.y}-${node.x}`].setNode(nodeType.PATH_NOANIMATION);\n      }\n    }\n  }\n\n  calculateVisualizedNodes(algorithm) {\n    let visitedNodes, nodesInPath;\n    switch (algorithm) {\n      case \"Dijkstra\":\n        visitedNodes = dijkstra(this.grid, this.startNode, this.endNode);\n        nodesInPath = dijkstraPath(this.startNode, this.endNode);\n        break;\n      case \"A* Search\":\n        break;\n      case \"Depth First Search\":\n        visitedNodes = dfs(this.grid, this.startNode, this.endNode);\n        nodesInPath = visitedNodes;\n        break;\n      case \"Breadth First Search\":\n        visitedNodes = bfs(this.grid, this.startNode, this.endNode);\n        nodesInPath = visitedNodes;\n        break;\n      default:\n        visitedNodes = dijkstra(this.grid, this.startNode, this.endNode);\n        nodesInPath = dijkstraPath(this.startNode, this.endNode);\n        break;\n    }\n    return [visitedNodes, nodesInPath];\n  }\n\n  animateNodes(visitedNodes, nodesInPath, speed) {\n    for (let i = 0; i <= visitedNodes.length; i++) {\n      if (i === visitedNodes.length) {\n        setTimeout(() => {\n          for (let j = 0; j < nodesInPath.length; j++) {\n            setTimeout(() => {\n              const node = nodesInPath[j];\n              node.type = nodeType.PATH;\n              this[`node-${node.y}-${node.x}`].setNode(nodeType.PATH);\n            }, 10 + 4 * speed * j);\n          }\n        }, 10 + speed * i);\n      } else {\n        setTimeout(() => {\n          const node = visitedNodes[i];\n          node.type = nodeType.VISITED;\n          this[`node-${node.y}-${node.x}`].setNode(nodeType.VISITED);\n        }, 10 + speed * i);\n      }\n    }\n  }\n\n  handleMouseDown = (node, type) => {\n    this.isMousePressed = true;\n    this.clickedNode = node;\n    this.grid[node.y][node.x].type = type;\n\n    // can only modify the node once (for non-start, non-end nodes)\n    if (\n      this.clickedNode.type !== nodeType.START &&\n      this.clickedNode.type !== nodeType.END\n    ) {\n      node.canModify = false;\n      this.modfiedNodes.push(node);\n    }\n  };\n\n  handleMouseEnter = (node, type) => {\n    // can only modify the node once\n    if (!this.isMousePressed || !node.canModify) return;\n    if (\n      this.clickedNode.type !== nodeType.START &&\n      this.clickedNode.type !== nodeType.END\n    ) {\n      let new_type = node.type;\n      if (\n        node.type === nodeType.DEFAULT ||\n        node.type === nodeType.VISITED ||\n        node.type === nodeType.VISITED_NOANIMATION ||\n        node.type === nodeType.PATH ||\n        node.type === nodeType.PATH_NOANIMATION\n      ) {\n        new_type = type;\n      } else if (node.type === type) {\n        new_type = nodeType.DEFAULT;\n      }\n\n      this[`node-${node.y}-${node.x}`].setNode(new_type);\n      this.grid[node.y][node.x].type = new_type;\n\n      // set the flag so that the node cannot be modified\n      node.canModify = false;\n      this.modfiedNodes.push(node);\n    } else {\n      if (\n        node.type !== nodeType.WALL &&\n        node.type !== nodeType.START &&\n        node.type !== nodeType.END\n      ) {\n        const prevX = this.clickedNode.x;\n        const prevY = this.clickedNode.y;\n        const { x, y } = node;\n        this[`node-${prevY}-${prevX}`].setNode(nodeType.DEFAULT);\n        this.grid[prevY][prevX].type = nodeType.DEFAULT;\n        this[`node-${y}-${x}`].setNode(this.clickedNode.type);\n        this.grid[y][x].type = this.clickedNode.type;\n        if (this.grid[y][x].type === nodeType.START) {\n          this.startNode = this.grid[y][x];\n        } else {\n          this.endNode = this.grid[y][x];\n        }\n        this.clickedNode.x = x;\n        this.clickedNode.y = y;\n\n        if (this.algorithm) {\n          this.adaptAlgorithm();\n        }\n      }\n    }\n  };\n\n  handleMouseUp = () => {\n    this.isMousePressed = false;\n    this.clickedNode = null;\n\n    // reset all the modified nodes to can-modifiy\n    for (let i = 0; i < this.modfiedNodes.length; i++) {\n      const node = this.modfiedNodes[i];\n      this[`node-${node.y}-${node.x}`].setState({ canModify: true });\n    }\n    this.modfiedNodes = [];\n  };\n\n  constructInitGrid() {\n    let rows = this.props.rows;\n    let cols = this.props.cols;\n    let grid = [];\n\n    for (let i = 0; i < rows; i++) {\n      let row = [];\n      for (let j = 0; j < cols; j++) {\n        const type =\n          j === DEFAULT_START_X && i === DEFAULT_START_Y\n            ? nodeType.START\n            : j === DEFAULT_END_X && i === DEFAULT_END_Y\n            ? nodeType.END\n            : nodeType.DEFAULT;\n        let node = {\n          x: j,\n          y: i,\n          type: type,\n          isVisited: false,\n          distance: Infinity,\n          prevNode: null\n        };\n        row.push(node);\n      }\n      grid.push(row);\n    }\n    return grid;\n  }\n\n  render() {\n    return (\n      <div className=\"grid\">\n        {this.grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx} id=\"row\">\n              {row.map((node, nodeIdx) => {\n                return (\n                  <Node\n                    key={nodeIdx}\n                    id={`node-${rowIdx}-${nodeIdx}`}\n                    node={node}\n                    onMouseDown={this.handleMouseDown}\n                    onMouseEnter={this.handleMouseEnter}\n                    onMouseUp={this.handleMouseUp}\n                    onRef={ref => (this[`node-${rowIdx}-${nodeIdx}`] = ref)}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Grid;\n","import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Dropdown } from \"react-bootstrap\";\nimport \"./Navbar.css\";\n\nclass Navitem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { name: props.name, type: props.type };\n  }\n\n  render() {\n    const { type } = this.state;\n    if (type === \"button\") {\n      return (\n        <li>\n          <Button id=\"button\" onClick={() => this.props.onClick()}>\n            {this.state.name}\n          </Button>\n        </li>\n      );\n    } else {\n      return (\n        <li>\n          <Dropdown>\n            <Dropdown.Toggle id=\"dropdown-toggle\">\n              {this.state.name + \" : \" + this.props.curItem + \"  \"}\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              {this.props.itemList.map(item => {\n                return (\n                  <Dropdown.Item\n                    key={item}\n                    onSelect={() => this.props.onChangeItem(item)}\n                    id=\"dropdown-item\"\n                  >\n                    {item}\n                  </Dropdown.Item>\n                );\n              })}\n            </Dropdown.Menu>\n          </Dropdown>\n        </li>\n      );\n    }\n  }\n}\n\nexport default Navitem;\n","import React, { Component } from \"react\";\nimport Grid from \"./Grid\";\nimport { Navbar } from \"react-bootstrap\";\nimport { Nav } from \"react-bootstrap\";\nimport Navitem from \"./Navitem\";\nimport \"./Navbar.css\";\n\nconst algorithms = [\n  \"Dijkstra\",\n  \"A* Search\",\n  \"Depth First Search\",\n  \"Breadth First Search\"\n];\n\nconst speeds = [\"Fast\", \"Medium\", \"Slow\"];\n\nclass PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = { curAlgorithm: \"Dijkstra\", curSpeed: \"Fast\" };\n  }\n\n  handleChangeAlgorithm = algorithm => {\n    this.setState({ curAlgorithm: algorithm });\n  };\n\n  handleChangeSpeed = speedName => {\n    this.setState({ curSpeed: speedName });\n  };\n\n  handleReset = () => {\n    this.grid.resetGrid();\n  };\n\n  handleVisualize = () => {\n    let speed = 8;\n    switch (this.state.curSpeed) {\n      case \"Fast\":\n        speed = 8;\n        break;\n      case \"Medium\":\n        speed = 12;\n        break;\n      case \"Slow\":\n        speed = 15;\n        break;\n      default:\n        speed = 8;\n        break;\n    }\n    this.grid.visualize(this.state.curAlgorithm, speed);\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar variant=\"custom\">\n          <Navbar.Brand href=\"#home\">Pathfinding Visualizer</Navbar.Brand>\n          <Nav>\n            <Navitem\n              name={\"Visualize\"}\n              type={\"button\"}\n              onClick={this.handleVisualize}\n            />\n            <Navitem\n              name={\"Reset Board\"}\n              type={\"button\"}\n              onClick={this.handleReset}\n            />\n            <Navitem\n              name={\"Speed\"}\n              type={\"dropdown\"}\n              itemList={speeds}\n              curItem={this.state.curSpeed}\n              onChangeItem={this.handleChangeSpeed}\n            />\n            <Navitem\n              name={\"Algorithms\"}\n              type={\"dropdown\"}\n              itemList={algorithms}\n              curItem={this.state.curAlgorithm}\n              onChangeItem={this.handleChangeAlgorithm}\n            />\n          </Nav>\n        </Navbar>\n        <Grid\n          rows={24}\n          cols={54}\n          algorithm={this.state.curAlgorithm}\n          onRef={ref => (this.grid = ref)}\n        />\n      </div>\n    );\n  }\n}\n\nexport default PathfindingVisualizer;\n","import React from \"react\";\nimport \"./App.css\";\nimport PathfindingVisualizer from \"./components/PathfindingVisualizer\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"typeface-roboto\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}