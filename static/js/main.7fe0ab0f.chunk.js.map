{"version":3,"sources":["imgs/select.svg","imgs/visual.svg","imgs/add.svg","components/Node.jsx","algorithms/dijkstra.js","algorithms/astar.js","algorithms/greedy.js","algorithms/dfs.js","algorithms/bfs.js","maze/mazeGeneration.js","components/Grid.jsx","maze/random.js","components/Navitem.jsx","components/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","props","preventDragHandler","e","preventDefault","setNodeandAnimation","type","animation","setState","setNode","setAnimation","state","x","node","y","animationType","DEFAULT","canModify","this","onRef","undefined","typename","nodeType","START","END","WALL","WEIGHT_THREE","WEIGHT_FIVE","WEIGHT_EIGHT","animationname","VISITED","PATH","GENERATE","VISITED_NOANIMATION","PATH_NOANIMATION","className","onMouseDown","onMouseEnter","onDragStart","Component","dijkstra","grid","startNode","endNode","visitedNodes","unvisitedNodes","row","push","distance","length","sort","nodeA","nodeB","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","findPath","nodesInPath","currNode","unshift","prevNode","neighbors","unvisitedNeighbors","filter","neighbor","weight","totalDis","manhattanDis","isConnect","prev","getUnvisitedNeighbors","DEFAULT_START_X","Math","floor","window","innerWidth","DEFAULT_START_Y","innerHeight","DEFAULT_END_X","DEFAULT_END_Y","Grid","handleMouseDown","isVisualized","isMousePressed","clickedNode","toggleNode","nodetype","modfiedNodes","handleMouseEnter","moveStartorEndNode","handleMouseUp","i","constructInitGrid","algorithm","rows","cols","j","mazeType","resetGrid","mazeNodes","calculateMazeNodes","generateWall","animateMaze","setTimeout","random","randomWall","weights","weightType","randomWeight","generateAllWalls","initNode","randomIdx","temp","curNode","traversalGeneration","pop","randomNeighbor","dfsGeneration","interval","speed","resetGridforVisualize","calculateVisualizedNodes","animateNodes","abs","astar","greedy","dfs","bfs","new_type","prevX","prevY","adaptAlgorithm","onMouseUp","onMouseLeave","map","rowIdx","key","id","nodeIdx","ref","Navitem","name","Button","onClick","Dropdown","Toggle","curItem","Menu","itemList","item","Item","onSelect","onChangeItem","algorithms","maze","speeds","PathfindingVisualizer","handleChangeAlgorithm","curAlgorithm","handleChangeMaze","curMaze","handleChangeSpeed","speedname","curSpeed","handleChangeNodeType","curNodeType","handleReset","handleGenerateMaze","generateMaze","handleVisualize","visualize","ceil","col","Navbar","variant","Brand","href","Nav","src","select","alt","add","visual","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7fe0ab0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/select.f4d9287c.svg\";","module.exports = __webpack_public_path__ + \"static/media/visual.af17a8e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/add.93421e0d.svg\";","import React, { Component } from \"react\";\r\nimport \"./Node.css\";\r\n\r\nclass Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      x: props.node.x,\r\n      y: props.node.y,\r\n      type: props.node.type,\r\n      animation: animationType.DEFAULT,\r\n      canModify: true\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRef(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.onRef(undefined);\r\n  }\r\n\r\n  preventDragHandler = e => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  setNodeandAnimation = (type, animation) => {\r\n    this.setState({ type, animation });\r\n  };\r\n\r\n  setNode = type => {\r\n    this.setState({ type });\r\n  };\r\n\r\n  setAnimation = animation => {\r\n    this.setState({ animation });\r\n  };\r\n\r\n  render() {\r\n    let { type } = this.state;\r\n    let typename =\r\n      type === nodeType.START\r\n        ? \"node-start\"\r\n        : type === nodeType.END\r\n        ? \"node-end\"\r\n        : type === nodeType.WALL\r\n        ? \"node-wall\"\r\n        : type === nodeType.WEIGHT_THREE\r\n        ? \"node-three\"\r\n        : type === nodeType.WEIGHT_FIVE\r\n        ? \"node-five\"\r\n        : type === nodeType.WEIGHT_EIGHT\r\n        ? \"node-eight\"\r\n        : \"\";\r\n\r\n    let { animation } = this.state;\r\n    let animationname =\r\n      animation === animationType.VISITED\r\n        ? \"visited\"\r\n        : animation === animationType.PATH\r\n        ? \"path\"\r\n        : animation === animationType.GENERATE\r\n        ? \"generate\"\r\n        : animation === animationType.VISITED_NOANIMATION\r\n        ? \"visited-noanimation\"\r\n        : animation === animationType.PATH_NOANIMATION\r\n        ? \"path-noanimation\"\r\n        : \"\";\r\n\r\n    return (\r\n      <div className={`cell`}>\r\n        <div\r\n          className={`node ${typename} ${animationname}`}\r\n          onMouseDown={() => this.props.onMouseDown(this.state)}\r\n          onMouseEnter={() => this.props.onMouseEnter(this.state)}\r\n          onDragStart={this.preventDragHandler}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\nexport const nodeType = {\r\n  DEFAULT: 1,\r\n  START: 2,\r\n  END: 3,\r\n  WALL: 4,\r\n  WEIGHT_THREE: 5,\r\n  WEIGHT_FIVE: 6,\r\n  WEIGHT_EIGHT: 7\r\n};\r\n\r\nexport const animationType = {\r\n  DEFAULT: 1,\r\n  VISITED: 2,\r\n  PATH: 3,\r\n  GENERATE: 4,\r\n  VISITED_NOANIMATION: 5,\r\n  PATH_NOANIMATION: 6\r\n};\r\n","import { nodeType } from \"../components/Node\";\r\n\r\n// performs Dijkstra's algorithm\r\nexport function dijkstra(grid, startNode, endNode) {\r\n  let visitedNodes = [];\r\n  let unvisitedNodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      unvisitedNodes.push(node);\r\n    }\r\n  }\r\n  startNode.distance = 0;\r\n  while (unvisitedNodes.length !== 0) {\r\n    // sort the nodes by distance\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n    const closestNode = unvisitedNodes.shift();\r\n\r\n    // trapped by wall\r\n    if (closestNode.distance === Infinity) return visitedNodes;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodes.push(closestNode);\r\n\r\n    // reach goal\r\n    if (closestNode === endNode) return visitedNodes;\r\n\r\n    // update distance for neighbors\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n  return visitedNodes;\r\n}\r\n\r\n// backtracks from the endNode to find the shortest path\r\nexport function findPath(endNode) {\r\n  let nodesInPath = [];\r\n  let currNode = endNode;\r\n\r\n  while (currNode !== null) {\r\n    nodesInPath.unshift(currNode);\r\n    currNode = currNode.prevNode;\r\n  }\r\n\r\n  // check if end node is reached\r\n  nodesInPath = nodesInPath.length === 1 ? [] : nodesInPath;\r\n  return nodesInPath;\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  let neighbors = [];\r\n  const { x, y } = node;\r\n  if (y > 0) neighbors.push(grid[y - 1][x]);\r\n  if (y < grid.length - 1) neighbors.push(grid[y + 1][x]);\r\n  if (x > 0) neighbors.push(grid[y][x - 1]);\r\n  if (x < grid[0].length - 1) neighbors.push(grid[y][x + 1]);\r\n  const unvisitedNeighbors = neighbors.filter(\r\n    neighbor => !neighbor.isVisited && neighbor.type !== nodeType.WALL\r\n  );\r\n\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if (node.distance + neighbor.weight < neighbor.distance) {\r\n      neighbor.distance = node.distance + neighbor.weight;\r\n      neighbor.prevNode = node;\r\n    }\r\n  }\r\n}\r\n","import { nodeType } from \"../components/Node\";\r\n\r\n// performs astar algorithm\r\nexport function astar(grid, startNode, endNode) {\r\n  let visitedNodes = [];\r\n  let unvisitedNodes = [];\r\n\r\n  // calculate heuristic distance from each node to end node\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      node.manhattanDis = ManhattanDistance(node, endNode);\r\n      unvisitedNodes.push(node);\r\n    }\r\n  }\r\n\r\n  startNode.distance = 0;\r\n  startNode.totalDis = startNode.manhattanDis;\r\n\r\n  while (unvisitedNodes.length !== 0) {\r\n    // sort the nodes by total distance\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.totalDis - nodeB.totalDis);\r\n    const closestNode = unvisitedNodes.shift();\r\n\r\n    // trapped by wall\r\n    if (closestNode.distance === Infinity) return visitedNodes;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodes.push(closestNode);\r\n\r\n    // reach goal\r\n    if (closestNode === endNode) return visitedNodes;\r\n\r\n    // update distance for neighbors\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n  return visitedNodes;\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  let neighbors = [];\r\n  const { x, y } = node;\r\n  if (y > 0) neighbors.push(grid[y - 1][x]);\r\n  if (y < grid.length - 1) neighbors.push(grid[y + 1][x]);\r\n  if (x > 0) neighbors.push(grid[y][x - 1]);\r\n  if (x < grid[0].length - 1) neighbors.push(grid[y][x + 1]);\r\n  const unvisitedNeighbors = neighbors.filter(\r\n    neighbor => !neighbor.isVisited && neighbor.type !== nodeType.WALL\r\n  );\r\n\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    if (node.distance + neighbor.weight < neighbor.distance) {\r\n      neighbor.distance = node.distance + neighbor.weight;\r\n      neighbor.totalDis = neighbor.distance + neighbor.manhattanDis;\r\n      neighbor.prevNode = node;\r\n    }\r\n  }\r\n}\r\n\r\nfunction ManhattanDistance(nodeA, nodeB) {\r\n  return Math.abs(nodeA.x - nodeB.x) + Math.abs(nodeA.y - nodeB.y);\r\n}\r\n","import { nodeType } from \"../components/Node\";\r\n\r\n// performs greedy best-first search algorithm\r\nexport function greedy(grid, startNode, endNode) {\r\n  let visitedNodes = [];\r\n  let unvisitedNodes = [];\r\n\r\n  // calculate heuristic distance from each node to end node\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      node.distance = node.weight + ManhattanDistance(node, endNode);\r\n    }\r\n  }\r\n\r\n  unvisitedNodes.push(startNode);\r\n  startNode.isVisited = true;\r\n\r\n  while (unvisitedNodes.length !== 0) {\r\n    // sort the nodes by total distance\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n    const closestNode = unvisitedNodes.shift();\r\n\r\n    // trapped by wall\r\n    if (closestNode.distance === Infinity) return visitedNodes;\r\n\r\n    visitedNodes.push(closestNode);\r\n\r\n    // reach goal\r\n    if (closestNode === endNode) return visitedNodes;\r\n\r\n    // update distance for neighbors\r\n    updateUnvisitedNeighbors(closestNode, grid, unvisitedNodes);\r\n  }\r\n\r\n  return visitedNodes;\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\r\n  const { x, y } = node;\r\n  if (\r\n    x > 0 &&\r\n    !grid[y][x - 1].isVisited &&\r\n    grid[y][x - 1].type !== nodeType.WALL\r\n  ) {\r\n    grid[y][x - 1].isVisited = true;\r\n    grid[y][x - 1].prevNode = node;\r\n    unvisitedNodes.push(grid[y][x - 1]);\r\n  }\r\n  if (\r\n    y < grid.length - 1 &&\r\n    !grid[y + 1][x].isVisited &&\r\n    grid[y + 1][x].type !== nodeType.WALL\r\n  ) {\r\n    grid[y + 1][x].isVisited = true;\r\n    grid[y + 1][x].prevNode = node;\r\n    unvisitedNodes.push(grid[y + 1][x]);\r\n  }\r\n  if (\r\n    x < grid[0].length - 1 &&\r\n    !grid[y][x + 1].isVisited &&\r\n    grid[y][x + 1].type !== nodeType.WALL\r\n  ) {\r\n    grid[y][x + 1].isVisited = true;\r\n    grid[y][x + 1].prevNode = node;\r\n    unvisitedNodes.push(grid[y][x + 1]);\r\n  }\r\n  if (\r\n    y > 0 &&\r\n    !grid[y - 1][x].isVisited &&\r\n    grid[y - 1][x].type !== nodeType.WALL\r\n  ) {\r\n    grid[y - 1][x].isVisited = true;\r\n    grid[y - 1][x].prevNode = node;\r\n    unvisitedNodes.push(grid[y - 1][x]);\r\n  }\r\n}\r\n\r\nfunction ManhattanDistance(nodeA, nodeB) {\r\n  return Math.abs(nodeA.x - nodeB.x) + Math.abs(nodeA.y - nodeB.y);\r\n}\r\n","import { nodeType } from \"../components/Node\";\r\n\r\n// performs depth first search algorithm\r\nexport function dfs(grid, startNode, endNode) {\r\n  const visitedNodes = [];\r\n  let unvisitedNodes = [];\r\n  unvisitedNodes.push(startNode);\r\n  while (unvisitedNodes.length !== 0) {\r\n    // get next cur node\r\n    const curNode = unvisitedNodes.shift();\r\n\r\n    // stack may contain two same nodes\r\n    if (!curNode.isVisited) {\r\n      curNode.isVisited = true;\r\n      visitedNodes.push(curNode);\r\n      if (curNode === endNode) return [visitedNodes, true];\r\n\r\n      // add neighbors to unvisitedNodes\r\n      updateUnvisitedNeighbors(curNode, grid, unvisitedNodes);\r\n    }\r\n  }\r\n\r\n  return [visitedNodes, false];\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\r\n  const { x, y } = node;\r\n  if (\r\n    x > 0 &&\r\n    !grid[y][x - 1].isVisited &&\r\n    grid[y][x - 1].type !== nodeType.WALL\r\n  )\r\n    unvisitedNodes.unshift(grid[y][x - 1]);\r\n  if (\r\n    y < grid.length - 1 &&\r\n    !grid[y + 1][x].isVisited &&\r\n    grid[y + 1][x].type !== nodeType.WALL\r\n  )\r\n    unvisitedNodes.unshift(grid[y + 1][x]);\r\n  if (\r\n    x < grid[0].length - 1 &&\r\n    !grid[y][x + 1].isVisited &&\r\n    grid[y][x + 1].type !== nodeType.WALL\r\n  )\r\n    unvisitedNodes.unshift(grid[y][x + 1]);\r\n  if (\r\n    y > 0 &&\r\n    !grid[y - 1][x].isVisited &&\r\n    grid[y - 1][x].type !== nodeType.WALL\r\n  )\r\n    unvisitedNodes.unshift(grid[y - 1][x]);\r\n}\r\n","import { nodeType } from \"../components/Node\";\r\n\r\n// performs breadth first search algorithm\r\nexport function bfs(grid, startNode, endNode) {\r\n  const visitedNodes = [];\r\n  let unvisitedNodes = [];\r\n  unvisitedNodes.push(startNode);\r\n  startNode.isVisited = true;\r\n  while (unvisitedNodes.length !== 0) {\r\n    // get next cur node\r\n    const curNode = unvisitedNodes.shift();\r\n    visitedNodes.push(curNode);\r\n\r\n    // reach goal\r\n    if (curNode === endNode) return [visitedNodes, true];\r\n\r\n    // add neighbors to unvisitedNodes\r\n    updateUnvisitedNeighbors(curNode, grid, unvisitedNodes);\r\n  }\r\n\r\n  return [visitedNodes, false];\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid, unvisitedNodes) {\r\n  const { x, y } = node;\r\n  if (\r\n    x > 0 &&\r\n    !grid[y][x - 1].isVisited &&\r\n    grid[y][x - 1].type !== nodeType.WALL\r\n  ) {\r\n    grid[y][x - 1].isVisited = true;\r\n    unvisitedNodes.push(grid[y][x - 1]);\r\n  }\r\n  if (\r\n    y < grid.length - 1 &&\r\n    !grid[y + 1][x].isVisited &&\r\n    grid[y + 1][x].type !== nodeType.WALL\r\n  ) {\r\n    grid[y + 1][x].isVisited = true;\r\n    unvisitedNodes.push(grid[y + 1][x]);\r\n  }\r\n  if (\r\n    x < grid[0].length - 1 &&\r\n    !grid[y][x + 1].isVisited &&\r\n    grid[y][x + 1].type !== nodeType.WALL\r\n  ) {\r\n    grid[y][x + 1].isVisited = true;\r\n    unvisitedNodes.push(grid[y][x + 1]);\r\n  }\r\n  if (\r\n    y > 0 &&\r\n    !grid[y - 1][x].isVisited &&\r\n    grid[y - 1][x].type !== nodeType.WALL\r\n  ) {\r\n    grid[y - 1][x].isVisited = true;\r\n    unvisitedNodes.push(grid[y - 1][x]);\r\n  }\r\n}\r\n","import { nodeType } from \"../components/Node\";\r\n\r\nfunction isConnect(node, grid, prev) {\r\n  const { x, y } = node;\r\n  if (y > 0 && prev !== grid[y - 1][x] && grid[y - 1][x].isVisited) return true;\r\n  if (\r\n    y < grid.length - 1 &&\r\n    prev !== grid[y + 1][x] &&\r\n    grid[y + 1][x].isVisited\r\n  )\r\n    return true;\r\n  if (x > 0 && prev !== grid[y][x - 1] && grid[y][x - 1].isVisited) return true;\r\n  if (\r\n    x < grid[0].length - 1 &&\r\n    prev !== grid[y][x + 1] &&\r\n    grid[y][x + 1].isVisited\r\n  )\r\n    return true;\r\n  return false;\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  let neighbors = [];\r\n  const { x, y } = node;\r\n  if (y > 0) neighbors.push(grid[y - 1][x]);\r\n  if (y < grid.length - 1) neighbors.push(grid[y + 1][x]);\r\n  if (x > 0) neighbors.push(grid[y][x - 1]);\r\n  if (x < grid[0].length - 1) neighbors.push(grid[y][x + 1]);\r\n  const unvisitedNeighbors = neighbors.filter(\r\n    neighbor => !neighbor.isVisited && !isConnect(neighbor, grid, node)\r\n  );\r\n  return unvisitedNeighbors;\r\n}\r\n\r\n// depth-first search approach using recursive backtracker and stack\r\nexport function dfsGeneration(grid) {\r\n  // init node\r\n  const initNode =\r\n    grid[0][0].type !== nodeType.START && grid[0][0].type !== nodeType.END\r\n      ? grid[0][0]\r\n      : grid[0][1].type !== nodeType.START && grid[0][1].type !== nodeType.END\r\n      ? grid[0][1]\r\n      : grid[0][2];\r\n  initNode.isVisited = true;\r\n  initNode.type = nodeType.DEFAULT;\r\n\r\n  let mazeNodes = [];\r\n  let visitedNodes = [];\r\n  visitedNodes.push(initNode);\r\n  mazeNodes.push(initNode);\r\n\r\n  while (visitedNodes.length !== 0) {\r\n    let curNode = visitedNodes.pop();\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n\r\n    // If the current cell has any neighbours which have not been visited\r\n    if (unvisitedNeighbors.length !== 0) {\r\n      visitedNodes.push(curNode);\r\n      // pick a random neighbor\r\n      let randomNeighbor =\r\n        unvisitedNeighbors[\r\n          Math.floor(Math.random() * unvisitedNeighbors.length)\r\n        ];\r\n      randomNeighbor.isVisited = true; // set visited\r\n      visitedNodes.push(randomNeighbor); // push it to the stack\r\n      if (randomNeighbor.type === nodeType.WALL) {\r\n        randomNeighbor.type = nodeType.DEFAULT; // remove wall\r\n        mazeNodes.push(randomNeighbor); // add to animation nodes\r\n      }\r\n    }\r\n  }\r\n\r\n  return mazeNodes;\r\n}\r\n\r\n// random traversal\r\nexport function traversalGeneration(grid) {\r\n  // init node\r\n  const initNode =\r\n    grid[0][0].type !== nodeType.START && grid[0][0].type !== nodeType.END\r\n      ? grid[0][0]\r\n      : grid[0][1].type !== nodeType.START && grid[0][1].type !== nodeType.END\r\n      ? grid[0][1]\r\n      : grid[0][2];\r\n  initNode.type = nodeType.DEFAULT;\r\n\r\n  let mazeNodes = [];\r\n  let visitedNodes = [];\r\n  visitedNodes.push(initNode);\r\n  mazeNodes.push(initNode);\r\n\r\n  while (visitedNodes.length !== 0) {\r\n    // randomly expand\r\n    let randomIdx = Math.floor(Math.random() * visitedNodes.length);\r\n    // swap for shuffling\r\n    let temp = visitedNodes[randomIdx];\r\n    visitedNodes[randomIdx] = visitedNodes[0];\r\n    visitedNodes[0] = temp;\r\n    let curNode = visitedNodes.shift();\r\n\r\n    // make sure it doesn't connect previous maze\r\n    if (isConnect(curNode, grid, curNode.prevNode)) {\r\n      continue;\r\n    }\r\n    curNode.isVisited = true; // set visited flag\r\n    if (curNode.type === nodeType.WALL) {\r\n      curNode.type = nodeType.DEFAULT; // remove wall\r\n      mazeNodes.push(curNode); // add to animation nodes\r\n    }\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(curNode, grid);\r\n\r\n    // If the current cell has any neighbours which have not been visited\r\n    if (unvisitedNeighbors.length !== 0) {\r\n      for (let neighbor of unvisitedNeighbors) {\r\n        neighbor.prevNode = curNode;\r\n        visitedNodes.push(neighbor); // push it to the stack\r\n      }\r\n    }\r\n  }\r\n\r\n  return mazeNodes;\r\n}\r\n\r\n// recursive division\r\nexport function recursiveDivision(grid) {\r\n  let row = grid.length;\r\n  let col = grid[0].length;\r\n  let mazeNodes = [];\r\n  return mazeNodes;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node, { nodeType, animationType } from \"./Node\";\r\nimport { dijkstra, findPath } from \"../algorithms/dijkstra\";\r\nimport { astar } from \"../algorithms/astar\";\r\nimport { greedy } from \"../algorithms/greedy\";\r\nimport { dfs } from \"../algorithms/dfs\";\r\nimport { bfs } from \"../algorithms/bfs\";\r\nimport { randomWall, randomWeight } from \"../maze/random\";\r\nimport {\r\n  dfsGeneration,\r\n  traversalGeneration,\r\n  recursiveDivision\r\n} from \"../maze/mazeGeneration\";\r\n\r\nimport \"./Node.css\";\r\n\r\nconst DEFAULT_START_X = Math.floor((window.innerWidth / 25 + 1) / 4);\r\nconst DEFAULT_START_Y = Math.floor((window.innerHeight / 25 - 9) / 2);\r\nconst DEFAULT_END_X = Math.floor(((window.innerWidth / 25 + 1) * 3) / 4);\r\nconst DEFAULT_END_Y = Math.floor((window.innerHeight / 25 - 9) / 2);\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.grid = this.constructInitGrid();\r\n    this.startNode = this.grid[DEFAULT_START_Y][DEFAULT_START_X];\r\n    this.endNode = this.grid[DEFAULT_END_Y][DEFAULT_END_X];\r\n    this.isMousePressed = false;\r\n    this.isVisualized = false;\r\n    this.algorithm = null;\r\n    this.clickedNode = null;\r\n    this.modfiedNodes = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRef(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.onRef(undefined);\r\n  }\r\n\r\n  resetGrid() {\r\n    if (this.isVisualized) return;\r\n    let rows = this.props.rows;\r\n    let cols = this.props.cols;\r\n    this.algorithm = null;\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        if (\r\n          this.grid[i][j].type !== nodeType.START &&\r\n          this.grid[i][j].type !== nodeType.END\r\n        ) {\r\n          this.grid[i][j].type = nodeType.DEFAULT;\r\n          this.grid[i][j].weight = 1;\r\n          this[`node-${i}-${j}`].setNode(nodeType.DEFAULT);\r\n        }\r\n        this.grid[i][j].prevNode = null;\r\n        this.grid[i][j].distance = Infinity;\r\n        this.grid[i][j].totalDis = Infinity;\r\n        this.grid[i][j].manhattanDis = Infinity;\r\n        this.grid[i][j].isVisited = false;\r\n        this[`node-${i}-${j}`].setAnimation(animationType.DEFAULT);\r\n      }\r\n    }\r\n  }\r\n\r\n  generateMaze(mazeType) {\r\n    if (this.isVisualized) return;\r\n    this.resetGrid(); // reset the grid for new maze\r\n    this.isVisualized = true; // set flag\r\n\r\n    // generate maze nodes in grid\r\n    const mazeNodes = this.calculateMazeNodes(mazeType);\r\n    const generateWall =\r\n      mazeType === \"Random Traversal\" || mazeType === \"Depth-First Search\"\r\n        ? true\r\n        : false;\r\n    this.animateMaze(mazeNodes, generateWall);\r\n  }\r\n\r\n  generateAllWalls() {\r\n    let i = 0;\r\n    for (const row of this.grid) {\r\n      for (const node of row) {\r\n        // generate a grid with all walls\r\n        if (node.type === nodeType.DEFAULT) {\r\n          node.type = nodeType.WALL; // set to wall\r\n          setTimeout(() => {\r\n            this[`node-${node.y}-${node.x}`].setNodeandAnimation(\r\n              nodeType.WALL,\r\n              animationType.GENERATE\r\n            );\r\n          }, 4 * i);\r\n          i++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  calculateMazeNodes(mazeType) {\r\n    let mazeNodes;\r\n    switch (mazeType) {\r\n      case \"Random Wall\":\r\n        mazeNodes = randomWall(this.grid);\r\n        break;\r\n      case \"Random Weight\":\r\n        mazeNodes = randomWeight(this.grid);\r\n        break;\r\n      case \"Random Traversal\":\r\n        this.generateAllWalls();\r\n        mazeNodes = traversalGeneration(this.grid);\r\n        break;\r\n      case \"Depth-First Search\":\r\n        this.generateAllWalls();\r\n        mazeNodes = dfsGeneration(this.grid);\r\n        break;\r\n      case \"Recursive Division\":\r\n        mazeNodes = recursiveDivision(this.grid);\r\n        break;\r\n      default:\r\n        mazeNodes = [];\r\n        break;\r\n    }\r\n    return mazeNodes;\r\n  }\r\n\r\n  animateMaze(mazeNodes, generateWall) {\r\n    let rows = this.props.rows;\r\n    let cols = this.props.cols;\r\n    let interval = generateWall ? rows * cols : 0;\r\n    // animate maze nodes\r\n    for (let i = 0; i < mazeNodes.length; i++) {\r\n      setTimeout(() => {\r\n        const node = mazeNodes[i];\r\n        this[`node-${node.y}-${node.x}`].setNodeandAnimation(\r\n          node.type,\r\n          node.type === nodeType.DEFAULT\r\n            ? animationType.DEFAULT\r\n            : animationType.GENERATE\r\n        );\r\n      }, 4 * (i + interval + 1));\r\n    }\r\n\r\n    // finish maze generation\r\n    setTimeout(() => {\r\n      this.isVisualized = false;\r\n    }, 10 + (interval + mazeNodes.length + 1) * 4);\r\n  }\r\n\r\n  resetGridforVisualize() {\r\n    let rows = this.props.rows;\r\n    let cols = this.props.cols;\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        this.grid[i][j].prevNode = null;\r\n        this.grid[i][j].distance = Infinity;\r\n        this.grid[i][j].totalDis = Infinity;\r\n        this.grid[i][j].manhattanDis = Infinity;\r\n        this.grid[i][j].isVisited = false;\r\n        this[`node-${i}-${j}`].setAnimation(animationType.DEFAULT);\r\n      }\r\n    }\r\n  }\r\n\r\n  visualize(algorithm, speed) {\r\n    if (this.isVisualized) return;\r\n    this.isVisualized = true; // set flag\r\n\r\n    // reset the internal of the grid\r\n    // and clear previous visualization\r\n    this.resetGridforVisualize();\r\n    this.algorithm = algorithm;\r\n    const [visitedNodes, nodesInPath] = this.calculateVisualizedNodes(\r\n      algorithm\r\n    );\r\n    this.animateNodes(visitedNodes, nodesInPath, speed);\r\n  }\r\n\r\n  adaptAlgorithm() {\r\n    this.resetGridforVisualize();\r\n    const [visitedNodes, nodesInPath] = this.calculateVisualizedNodes(\r\n      this.props.algorithm\r\n    );\r\n\r\n    for (let i = 0; i < visitedNodes.length + nodesInPath.length; i++) {\r\n      let node;\r\n      if (i < visitedNodes.length) {\r\n        node = visitedNodes[i];\r\n        this[`node-${node.y}-${node.x}`].setAnimation(\r\n          animationType.VISITED_NOANIMATION\r\n        );\r\n      } else {\r\n        node = nodesInPath[i - visitedNodes.length];\r\n        this[`node-${node.y}-${node.x}`].setAnimation(\r\n          animationType.PATH_NOANIMATION\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  calculateVisualizedNodes(algorithm) {\r\n    let visitedNodes, nodesInPath, find;\r\n    switch (algorithm) {\r\n      case \"Dijkstra\":\r\n        visitedNodes = dijkstra(this.grid, this.startNode, this.endNode);\r\n        nodesInPath = findPath(this.endNode);\r\n        break;\r\n      case \"A* Search\":\r\n        visitedNodes = astar(this.grid, this.startNode, this.endNode);\r\n        nodesInPath = findPath(this.endNode);\r\n        break;\r\n      case \"Greedy Best-First Search\":\r\n        visitedNodes = greedy(this.grid, this.startNode, this.endNode);\r\n        nodesInPath = findPath(this.endNode);\r\n        break;\r\n      case \"Depth-First Search\":\r\n        [visitedNodes, find] = dfs(this.grid, this.startNode, this.endNode);\r\n        nodesInPath = find ? visitedNodes : [];\r\n        break;\r\n      case \"Breadth-First Search\":\r\n        [visitedNodes, find] = bfs(this.grid, this.startNode, this.endNode);\r\n        nodesInPath = find ? visitedNodes : [];\r\n        break;\r\n      default:\r\n        visitedNodes = dijkstra(this.grid, this.startNode, this.endNode);\r\n        nodesInPath = findPath(this.startNode, this.endNode);\r\n        break;\r\n    }\r\n    return [visitedNodes, nodesInPath];\r\n  }\r\n\r\n  animateNodes(visitedNodes, nodesInPath, speed) {\r\n    for (let i = 0; i <= visitedNodes.length; i++) {\r\n      if (i === visitedNodes.length) {\r\n        setTimeout(() => {\r\n          for (let j = 0; j < nodesInPath.length; j++) {\r\n            setTimeout(() => {\r\n              const node = nodesInPath[j];\r\n              if (node.type === nodeType.START || node.type === nodeType.END) {\r\n                this[`node-${node.y}-${node.x}`].setAnimation(\r\n                  animationType.PATH_NOANIMATION\r\n                );\r\n              } else {\r\n                this[`node-${node.y}-${node.x}`].setAnimation(\r\n                  animationType.PATH\r\n                );\r\n              }\r\n            }, 10 + 2 * speed * j);\r\n          }\r\n        }, 10 + speed * i);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = visitedNodes[i];\r\n          this[`node-${node.y}-${node.x}`].setAnimation(animationType.VISITED);\r\n        }, 10 + speed * i);\r\n      }\r\n    }\r\n\r\n    // finish visualization\r\n    setTimeout(() => {\r\n      this.isVisualized = false;\r\n    }, 100 + speed * visitedNodes.length + 2 * speed * nodesInPath.length);\r\n  }\r\n\r\n  toggleNode(node, type) {\r\n    let new_type = node.type;\r\n    if (node.type === nodeType.DEFAULT) {\r\n      new_type = type;\r\n      let weight =\r\n        new_type === nodeType.WEIGHT_THREE\r\n          ? 3\r\n          : new_type === nodeType.WEIGHT_FIVE\r\n          ? 5\r\n          : new_type === nodeType.WEIGHT_EIGHT\r\n          ? 8\r\n          : Infinity;\r\n      this.grid[node.y][node.x].weight = weight; // set weight\r\n      this[`node-${node.y}-${node.x}`].setNodeandAnimation(\r\n        new_type,\r\n        animationType.GENERATE\r\n      );\r\n    } else if (\r\n      node.type === nodeType.WALL ||\r\n      node.type === nodeType.WEIGHT_THREE ||\r\n      node.type === nodeType.WEIGHT_FIVE ||\r\n      node.type === nodeType.WEIGHT_EIGHT\r\n    ) {\r\n      new_type = nodeType.DEFAULT;\r\n      this.grid[node.y][node.x].weight = 1; // reset weight to 1\r\n      this[`node-${node.y}-${node.x}`].setNodeandAnimation(\r\n        new_type,\r\n        animationType.DEFAULT\r\n      );\r\n    }\r\n\r\n    this.grid[node.y][node.x].type = new_type;\r\n  }\r\n\r\n  moveStartorEndNode(node) {\r\n    if (node.type === nodeType.DEFAULT) {\r\n      const prevX = this.clickedNode.x;\r\n      const prevY = this.clickedNode.y;\r\n      const { x, y } = node;\r\n      this[`node-${prevY}-${prevX}`].setNode(nodeType.DEFAULT);\r\n      this.grid[prevY][prevX].type = nodeType.DEFAULT;\r\n      this[`node-${y}-${x}`].setNode(this.clickedNode.type);\r\n      this.grid[y][x].type = this.clickedNode.type;\r\n      if (this.grid[y][x].type === nodeType.START) {\r\n        this.startNode = this.grid[y][x];\r\n      } else {\r\n        this.endNode = this.grid[y][x];\r\n      }\r\n      this.clickedNode.x = x;\r\n      this.clickedNode.y = y;\r\n\r\n      if (this.algorithm) {\r\n        this.adaptAlgorithm();\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseDown = node => {\r\n    if (this.isVisualized) return;\r\n    this.isMousePressed = true;\r\n\r\n    // copy the node state\r\n    this.clickedNode = {\r\n      ...node\r\n    };\r\n\r\n    this.toggleNode(node, this.props.nodetype);\r\n\r\n    // can only modify the node once (for non-start, non-end nodes)\r\n    if (\r\n      this.clickedNode.type !== nodeType.START &&\r\n      this.clickedNode.type !== nodeType.END\r\n    ) {\r\n      node.canModify = false;\r\n      this.modfiedNodes.push(node);\r\n    }\r\n  };\r\n\r\n  handleMouseEnter = node => {\r\n    // can only modify the node once\r\n    if (!this.isMousePressed || !node.canModify) return;\r\n    if (\r\n      this.clickedNode.type !== nodeType.START &&\r\n      this.clickedNode.type !== nodeType.END\r\n    ) {\r\n      this.toggleNode(node, this.props.nodetype);\r\n\r\n      // set the flag so that the node cannot be modified\r\n      node.canModify = false;\r\n      this.modfiedNodes.push(node);\r\n    } else {\r\n      this.moveStartorEndNode(node);\r\n    }\r\n  };\r\n\r\n  handleMouseUp = () => {\r\n    this.isMousePressed = false;\r\n    this.clickedNode = null;\r\n\r\n    // reset all the modified nodes to can-modifiy\r\n    for (let i = 0; i < this.modfiedNodes.length; i++) {\r\n      const node = this.modfiedNodes[i];\r\n      this[`node-${node.y}-${node.x}`].setState({ canModify: true });\r\n    }\r\n    this.modfiedNodes = [];\r\n  };\r\n\r\n  constructInitGrid() {\r\n    let rows = this.props.rows;\r\n    let cols = this.props.cols;\r\n    let grid = [];\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        const type =\r\n          j === DEFAULT_START_X && i === DEFAULT_START_Y\r\n            ? nodeType.START\r\n            : j === DEFAULT_END_X && i === DEFAULT_END_Y\r\n            ? nodeType.END\r\n            : nodeType.DEFAULT;\r\n        let node = {\r\n          x: j,\r\n          y: i,\r\n          type: type,\r\n          isVisited: false,\r\n          distance: Infinity,\r\n          totalDis: Infinity,\r\n          manhattanDis: Infinity,\r\n          weight: 1,\r\n          prevNode: null\r\n        };\r\n        row.push(node);\r\n      }\r\n      grid.push(row);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"grid\"\r\n        onMouseUp={() => this.handleMouseUp()}\r\n        onMouseLeave={() => this.handleMouseUp()}\r\n      >\r\n        {this.grid.map((row, rowIdx) => {\r\n          return (\r\n            <div key={rowIdx} id=\"row\">\r\n              {row.map((node, nodeIdx) => {\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    id={`node-${rowIdx}-${nodeIdx}`}\r\n                    node={node}\r\n                    onMouseDown={this.handleMouseDown}\r\n                    onMouseEnter={this.handleMouseEnter}\r\n                    onRef={ref => (this[`node-${rowIdx}-${nodeIdx}`] = ref)}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import { nodeType } from \"../components/Node\";\r\n\r\nexport function randomWall(grid) {\r\n  let mazeNodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      // generate wall on default node\r\n      if (node.type === nodeType.DEFAULT) {\r\n        if (Math.random() >= 0.65) {\r\n          node.type = nodeType.WALL; // set type\r\n          mazeNodes.push(node);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return mazeNodes;\r\n}\r\n\r\nexport function randomWeight(grid) {\r\n  let mazeNodes = [];\r\n  const weights = [\r\n    nodeType.WEIGHT_THREE,\r\n    nodeType.WEIGHT_FIVE,\r\n    nodeType.WEIGHT_EIGHT\r\n  ];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      // generate differnet weights on default node\r\n      if (node.type === nodeType.DEFAULT) {\r\n        if (Math.random() >= 0.4) {\r\n          // randomly choose a weight\r\n          const weightType = weights[Math.floor(Math.random() * 3)];\r\n          let weight =\r\n            weightType === nodeType.WEIGHT_THREE\r\n              ? 3\r\n              : weightType === nodeType.WEIGHT_FIVE\r\n              ? 5\r\n              : weightType === nodeType.WEIGHT_EIGHT\r\n              ? 8\r\n              : 3;\r\n          node.weight = weight; // set weight\r\n          node.type = weightType; // set type\r\n          mazeNodes.push(node);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return mazeNodes;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport \"./Navbar.css\";\r\n\r\nclass Navitem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { name: props.name, type: props.type };\r\n  }\r\n\r\n  render() {\r\n    const { type } = this.state;\r\n    if (type === \"button\") {\r\n      return (\r\n        <li>\r\n          <Button id=\"button\" onClick={() => this.props.onClick()}>\r\n            {this.state.name}\r\n          </Button>\r\n        </li>\r\n      );\r\n    } else {\r\n      return (\r\n        <li>\r\n          <Dropdown>\r\n            <Dropdown.Toggle id=\"dropdown-toggle\">\r\n              {this.state.name + \" : \" + this.props.curItem + \"  \"}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              {this.props.itemList.map(item => {\r\n                return (\r\n                  <Dropdown.Item\r\n                    key={item}\r\n                    onSelect={() => this.props.onChangeItem(item)}\r\n                    id=\"dropdown-item\"\r\n                  >\r\n                    {item}\r\n                  </Dropdown.Item>\r\n                );\r\n              })}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </li>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Navitem;\r\n","import React, { Component } from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport Grid from \"./Grid\";\r\nimport { nodeType } from \"./Node\";\r\nimport Navitem from \"./Navitem\";\r\nimport select from \"../imgs/select.svg\";\r\nimport visual from \"../imgs/visual.svg\";\r\nimport add from \"../imgs/add.svg\";\r\nimport \"./Navbar.css\";\r\n\r\nconst algorithms = [\r\n  \"Dijkstra\",\r\n  \"A* Search\",\r\n  \"Greedy Best-First Search\",\r\n  \"Depth-First Search\",\r\n  \"Breadth-First Search\"\r\n];\r\n\r\nconst maze = [\r\n  \"Random Wall\",\r\n  \"Random Weight\",\r\n  \"Random Traversal\",\r\n  \"Depth-First Search\",\r\n  \"Recursive Division\"\r\n];\r\n\r\nconst weights = [\"Wall\", \"Weight 3\", \"Weight 5\", \"Weight 8\"];\r\n\r\nconst speeds = [\"Fast\", \"Medium\", \"Slow\"];\r\n\r\nclass PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      curAlgorithm: \"Dijkstra\",\r\n      curSpeed: \"Fast\",\r\n      curNodeType: \"Wall\",\r\n      curMaze: \"Random Wall\"\r\n    };\r\n  }\r\n\r\n  handleChangeAlgorithm = algorithm => {\r\n    this.setState({ curAlgorithm: algorithm });\r\n  };\r\n\r\n  handleChangeMaze = mazeType => {\r\n    this.setState({ curMaze: mazeType });\r\n  };\r\n\r\n  handleChangeSpeed = speedname => {\r\n    this.setState({ curSpeed: speedname });\r\n  };\r\n\r\n  handleChangeNodeType = nodetype => {\r\n    this.setState({ curNodeType: nodetype });\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.grid.resetGrid();\r\n  };\r\n\r\n  handleGenerateMaze = () => {\r\n    this.grid.generateMaze(this.state.curMaze);\r\n  };\r\n\r\n  handleVisualize = () => {\r\n    let speed = 12;\r\n    switch (this.state.curSpeed) {\r\n      case \"Fast\":\r\n        speed = 12;\r\n        break;\r\n      case \"Medium\":\r\n        speed = 16;\r\n        break;\r\n      case \"Slow\":\r\n        speed = 20;\r\n        break;\r\n      default:\r\n        speed = 12;\r\n        break;\r\n    }\r\n    if (window.innerWidth > 1440) {\r\n      speed = speed / 2;\r\n    }\r\n    this.grid.visualize(this.state.curAlgorithm, speed);\r\n  };\r\n\r\n  render() {\r\n    let row = Math.ceil(window.innerHeight / 25) - 9;\r\n    let col = Math.ceil(window.innerWidth / 25) + 1;\r\n    let nodetype =\r\n      this.state.curNodeType === \"Weight 3\"\r\n        ? nodeType.WEIGHT_THREE\r\n        : this.state.curNodeType === \"Weight 5\"\r\n        ? nodeType.WEIGHT_FIVE\r\n        : this.state.curNodeType === \"Weight 8\"\r\n        ? nodeType.WEIGHT_EIGHT\r\n        : nodeType.WALL;\r\n    return (\r\n      <div>\r\n        <Navbar variant=\"custom\">\r\n          <Navbar.Brand href=\"#home\">Pathfinding Visualizer</Navbar.Brand>\r\n          <Nav>\r\n            <Navitem\r\n              name={\"Visualize\"}\r\n              type={\"button\"}\r\n              onClick={this.handleVisualize}\r\n            />\r\n            <Navitem\r\n              name={\"Generate Maze\"}\r\n              type={\"button\"}\r\n              onClick={this.handleGenerateMaze}\r\n            />\r\n            <Navitem\r\n              name={\"Reset\"}\r\n              type={\"button\"}\r\n              onClick={this.handleReset}\r\n            />\r\n            <Navitem\r\n              name={\"Algorithms\"}\r\n              type={\"dropdown\"}\r\n              itemList={algorithms}\r\n              curItem={this.state.curAlgorithm}\r\n              onChangeItem={this.handleChangeAlgorithm}\r\n            />\r\n            <Navitem\r\n              name={\"Maze\"}\r\n              type={\"dropdown\"}\r\n              itemList={maze}\r\n              curItem={this.state.curMaze}\r\n              onChangeItem={this.handleChangeMaze}\r\n            />\r\n            <Navitem\r\n              name={\"Add Node\"}\r\n              type={\"dropdown\"}\r\n              itemList={weights}\r\n              curItem={this.state.curNodeType}\r\n              onChangeItem={this.handleChangeNodeType}\r\n            />\r\n            <Navitem\r\n              name={\"Speed\"}\r\n              type={\"dropdown\"}\r\n              itemList={speeds}\r\n              curItem={this.state.curSpeed}\r\n              onChangeItem={this.handleChangeSpeed}\r\n            />\r\n          </Nav>\r\n        </Navbar>\r\n        <div id=\"info\">\r\n          <ul>\r\n            <li>\r\n              <div className=\"start\"></div>\r\n              Start Node\r\n            </li>\r\n            <li>\r\n              <div className=\"end\"></div>\r\n              End Node\r\n            </li>\r\n            <li>\r\n              <div className=\"wall\"></div>\r\n              Wall Node\r\n            </li>\r\n            <li>\r\n              <div className=\"weight3\"></div>\r\n              Weight 3\r\n            </li>\r\n            <li>\r\n              <div className=\"weight5\"></div>\r\n              Weight 5\r\n            </li>\r\n            <li>\r\n              <div className=\"weight8\"></div>\r\n              Weight 8\r\n            </li>\r\n            <li>\r\n              <div className=\"unvisited-node\"></div>\r\n              Unvisited Node\r\n            </li>\r\n            <li>\r\n              <div className=\"visited-node\"></div>\r\n              Visited Node\r\n            </li>\r\n            <li>\r\n              <div className=\"path-node\"></div>\r\n              Path Node\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"instruction\">\r\n          <ul>\r\n            <li>\r\n              <img src={select} alt=\"select\" />\r\n              <div> Pick an Algorithm </div>\r\n            </li>\r\n          </ul>\r\n          <ul>\r\n            <li>\r\n              <img src={add} alt=\"select\" />\r\n              <div id=\"middle\"> Add Wall, Weighted Nodes or Generate Maze </div>\r\n            </li>\r\n          </ul>\r\n          <ul>\r\n            <li>\r\n              <img src={visual} alt=\"select\" />\r\n              <div> Visualize and Enjoy! </div>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <Grid\r\n          rows={row}\r\n          cols={col}\r\n          algorithm={this.state.curAlgorithm}\r\n          nodetype={nodetype}\r\n          onRef={ref => (this.grid = ref)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PathfindingVisualizer;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport PathfindingVisualizer from \"./components/PathfindingVisualizer\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"typeface-roboto\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PathfindingVisualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}